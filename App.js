import React, { useState, useEffect } from 'react';
import { Calendar, Pill, Activity, Heart, Plus, X, CheckCircle, AlertCircle, User, Moon, Sun, MapPin, Navigation, MessageCircle, Send, Menu, Globe } from 'lucide-react';

const translations = {
  en: {
    name: "English",
    appTitle: "Health Tracker",
    welcome: "Welcome!",
    welcomeDesc: "Track medicines and exercises easily.",
    enterInfo: "Enter Info",
    enterInfoDesc: "Tell us your name and age.",
    dashboard: "Dashboard",
    dashboardDesc: "See your progress at a glance.",
    addMedicines: "Add Medicines",
    addMedicinesDesc: "Click 'Medicines' to add medications.",
    checkOff: "Check Off",
    checkOffDesc: "Mark medicines as taken.",
    exercisePlan: "Exercise Plan",
    exercisePlanDesc: "View your 45-min routine.",
    trackProgress: "Track Progress",
    trackProgressDesc: "Check off exercises.",
    allSet: "All Set!",
    allSetDesc: "Check in daily!",
    skip: "Skip",
    back: "Back",
    next: "Next",
    getStarted: "Get Started",
    yourName: "Your Name",
    yourAge: "Your Age",
    enterName: "Enter your name",
    enterAge: "Enter your age",
    saveProfile: "Save Profile",
    welcomeBack: "Welcome back! Here's your health summary for today.",
    medicines: "Medicines",
    exercise: "Exercise",
    today: "Today",
    dosesTaken: "Doses taken today",
    completed: "Completed!",
    activitiesDone: "Activities done",
    todaysMedicines: "Today's Medicines",
    noMedicinesScheduled: "No medicines scheduled",
    addMedicinesBtn: "Add medicines",
    morningExercise: "Morning Exercise",
    ageRestriction: "Age Restriction",
    availableFor12Plus: "Available for ages 12+",
    consultDoctor: "‚ö†Ô∏è Consult your doctor first",
    markAllDone: "Mark All Done",
    allDoneToday: "‚úì All Done!",
    myMedicines: "My Medicines",
    manageMedication: "Manage your medication schedule",
    addMedicine: "Add Medicine",
    addNewMedicine: "Add New Medicine",
    medicineName: "Medicine Name",
    dosage: "Dosage",
    egAspirin: "e.g., Aspirin",
    eg100mg: "e.g., 100mg",
    saveMedicine: "Save Medicine",
    cancel: "Cancel",
    noMedicinesAdded: "No medicines added yet",
    clickToAdd: "Click \"Add Medicine\" to get started",
    healthAI: "Health AI Assistant",
    askAboutSymptoms: "Ask about symptoms, medications, or health advice",
    askQuestion: "Ask a health question...",
    emergencyWarning: "‚ö†Ô∏è For emergencies, call 911 or visit Hospitals tab",
    nearbyHospitals: "Nearby Hospitals",
    findEmergencyCare: "Find emergency care near you",
    enableLocation: "Enable Location Services",
    allowLocation: "Allow location access to find hospitals",
    getMyLocation: "Get My Location",
    gettingLocation: "Getting Location...",
    locationFound: "‚úì Location found! Showing nearest hospitals",
    refresh: "Refresh",
    emergencyServices: "üö® Emergency Services",
    directions: "Directions",
    callNow: "Call Now",
    emergencyInfo: "Emergency Information",
    call911: "Call 911 - Emergency Services",
    call911For: "Call 911 for: chest pain, difficulty breathing, severe bleeding, stroke symptoms, or loss of consciousness.",
    profileSettings: "Profile Settings",
    manageInfo: "Manage your information and preferences",
    name: "Name",
    age: "Age",
    saveChanges: "Save Changes",
    editProfile: "Edit Profile",
    appearance: "Appearance",
    darkMode: "Dark Mode",
    enabled: "Enabled",
    disabled: "Disabled",
    healthStats: "Health Statistics",
    totalMedicines: "Total Medicines",
    exercisePlanTime: "Exercise Plan",
    helpTutorial: "Help & Tutorial",
    hospitals: "Hospitals",
    profile: "Profile",
    home: "Home",
    chatbotGreeting: "Hello! I'm your Health Assistant. I can help answer medical questions about symptoms, conditions, medications, and general health advice. What would you like to know?",
    selectLanguage: "Select Language",
    exercises: {
      warmup: "Warm-up: Gentle walking",
      seatedMarching: "Warm-up: Seated marching",
      seatedMovements: "Warm-up: Seated movements",
      briskWalking: "Brisk walking or jogging",
      gentleWalking: "Gentle walking",
      seatedWalking: "Seated walking",
      strength: "Strength: Squats, push-ups",
      chairExercises: "Chair exercises",
      balance: "Balance exercises",
      balanceSupport: "Balance with support",
      handExercises: "Hand exercises",
      stretching: "Stretching",
      gentleStretching: "Gentle stretching",
      coolDown: "Cool down",
      breathing: "Breathing exercises",
      deepBreathing: "Deep breathing",
      low: "Low",
      veryLow: "Very Low",
      lowModerate: "Low-Moderate",
      moderate: "Moderate"
    },
    chatResponses: {
      greeting: "Hello! I'm your Health Assistant. I can help answer medical questions about symptoms, conditions, medications, and general health advice. What would you like to know?",
      welcome: "You're welcome! Stay healthy and consult your doctor for personalized advice.",
      headache: "For headaches:\n‚Ä¢ Rest in a quiet, dark room\n‚Ä¢ Stay hydrated\n‚Ä¢ Apply cold compress\n‚Ä¢ Avoid bright lights\n\nSee a doctor if severe or with fever.",
      fever: "For fever:\n‚Ä¢ Rest and drink fluids\n‚Ä¢ Take acetaminophen as directed\n‚Ä¢ Use cool compress\n\nCall doctor if above 103¬∞F or lasts 3+ days.",
      cough: "For cough/cold:\n‚Ä¢ Drink warm liquids\n‚Ä¢ Use humidifier\n‚Ä¢ Rest well\n‚Ä¢ Stay hydrated\n\nSee doctor if lasts 3+ weeks or coughing blood.",
      chest: "üö® EMERGENCY! Call 911 immediately for chest pain.",
      stroke: "üö® EMERGENCY! FAST test: Face drooping? Arm weakness? Speech difficulty? Call 911!",
      diabetes: "Diabetes management:\n‚Ä¢ Monitor blood sugar regularly\n‚Ä¢ Take medications as prescribed\n‚Ä¢ Balanced diet\n‚Ä¢ Regular exercise\n\nFollow your doctor's specific targets.",
      bp: "Blood pressure tips:\n‚Ä¢ Reduce salt\n‚Ä¢ Exercise daily\n‚Ä¢ Maintain healthy weight\n‚Ä¢ Take medications as prescribed\n\nNormal: Below 120/80",
      default: "I can help with symptoms, conditions, medications, and health advice. Please ask your question. For serious concerns, always consult your doctor!"
    }
  },
  as: {
    name: "‡¶Ö‡¶∏‡¶Æ‡ßÄ‡¶Ø‡¶º‡¶æ",
    appTitle: "‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶ü‡ßç‡ß∞‡ßá‡¶ï‡¶æ‡ß∞",
    welcome: "‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ!",
    welcomeDesc: "‡¶î‡¶∑‡¶ß ‡¶Ü‡ß∞‡ßÅ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶Ø‡¶º‡¶æ‡¶Æ ‡¶∏‡¶π‡¶ú‡ßá ‡¶ü‡ßç‡ß∞‡ßá‡¶ï ‡¶ï‡ß∞‡¶ï‡•§",
    enterInfo: "‡¶§‡¶•‡ßç‡¶Ø ‡¶¶‡¶ø‡¶Ø‡¶º‡¶ï",
    enterInfoDesc: "‡¶Ü‡¶™‡ßã‡¶®‡¶æ‡ß∞ ‡¶®‡¶æ‡¶Æ ‡¶Ü‡ß∞‡ßÅ ‡¶¨‡¶Ø‡¶º‡¶∏ ‡¶ú‡¶®‡¶æ‡¶ì‡¶ï‡•§",
    dashboard: "‡¶°‡ßá‡¶∂‡ßç‡¶¨‡¶¨'‡ß∞‡ßç‡¶°",
    dashboardDesc: "‡¶Ü‡¶™‡ßã‡¶®‡¶æ‡ß∞ ‡¶Ö‡¶ó‡ßç‡ß∞‡¶ó‡¶§‡¶ø ‡¶è‡¶ï ‡¶®‡¶ú‡ß∞‡¶§ ‡¶ö‡¶æ‡¶ì‡¶ï‡•§",
    addMedicines: "‡¶î‡¶∑‡¶ß ‡¶Ø‡ßã‡¶ó ‡¶ï‡ß∞‡¶ï",
    addMedicinesDesc: "‡¶î‡¶∑‡¶ß ‡¶Ø‡ßã‡¶ó ‡¶ï‡ß∞‡¶ø‡¶¨‡¶≤‡ßà '‡¶î‡¶∑‡¶ß' ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡ß∞‡¶ï‡•§",
    checkOff: "‡¶ö‡ßá‡¶ï ‡¶ï‡ß∞‡¶ï",
    checkOffDesc: "‡¶ó‡ßç‡ß∞‡¶π‡¶£ ‡¶ï‡ß∞‡¶æ ‡¶î‡¶∑‡¶ß ‡¶ö‡¶ø‡¶π‡ßç‡¶®‡¶ø‡¶§ ‡¶ï‡ß∞‡¶ï‡•§",
    exercisePlan: "‡¶¨‡ßç‡¶Ø‡¶æ‡¶Ø‡¶º‡¶æ‡¶Æ ‡¶™‡ß∞‡¶ø‡¶ï‡¶≤‡ßç‡¶™‡¶®‡¶æ",
    exercisePlanDesc: "‡¶Ü‡¶™‡ßã‡¶®‡¶æ‡ß∞ ‡ß™‡ß´ ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü‡ß∞ ‡ß∞‡ßÅ‡¶ü‡¶ø‡¶® ‡¶ö‡¶æ‡¶ì‡¶ï‡•§",
    trackProgress: "‡¶Ö‡¶ó‡ßç‡ß∞‡¶ó‡¶§‡¶ø ‡¶ü‡ßç‡ß∞‡ßá‡¶ï ‡¶ï‡ß∞‡¶ï",
    trackProgressDesc: "‡¶¨‡ßç‡¶Ø‡¶æ‡¶Ø‡¶º‡¶æ‡¶Æ ‡¶ö‡ßá‡¶ï ‡¶ï‡ß∞‡¶ï‡•§",
    allSet: "‡¶∏‡¶ï‡¶≤‡ßã ‡¶∏‡¶æ‡¶ú‡ßÅ!",
    allSetDesc: "‡¶¶‡ßà‡¶®‡¶ø‡¶ï ‡¶ö‡ßá‡¶ï ‡¶ï‡ß∞‡¶ï!",
    skip: "‡¶è‡ß∞‡¶ø ‡¶Ø‡¶æ‡¶ì‡¶ï",
    back: "‡¶™‡¶ø‡¶õ‡¶≤‡ßà",
    next: "‡¶™‡ß∞‡ß±‡ß∞‡ßç‡¶§‡ßÄ",
    getStarted: "‡¶Ü‡ß∞‡¶Æ‡ßç‡¶≠ ‡¶ï‡ß∞‡¶ï",
    yourName: "‡¶Ü‡¶™‡ßã‡¶®‡¶æ‡ß∞ ‡¶®‡¶æ‡¶Æ",
    yourAge: "‡¶Ü‡¶™‡ßã‡¶®‡¶æ‡ß∞ ‡¶¨‡¶Ø‡¶º‡¶∏",
    enterName: "‡¶Ü‡¶™‡ßã‡¶®‡¶æ‡ß∞ ‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡¶ï",
    enterAge: "‡¶Ü‡¶™‡ßã‡¶®‡¶æ‡ß∞ ‡¶¨‡¶Ø‡¶º‡¶∏ ‡¶≤‡¶ø‡¶ñ‡¶ï",
    saveProfile: "‡¶™‡ßç‡ß∞'‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶Ç‡ß∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡ß∞‡¶ï",
    welcomeBack: "‡¶Ü‡¶ï‡ßå ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ! ‡¶Ü‡¶ú‡¶ø‡ß∞ ‡¶¨‡¶æ‡¶¨‡ßá ‡¶Ü‡¶™‡ßã‡¶®‡¶æ‡ß∞ ‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶∏‡¶æ‡ß∞‡¶æ‡¶Ç‡¶∂ ‡¶á‡¶Ø‡¶º‡¶æ‡¶§ ‡¶Ü‡¶õ‡ßá‡•§",
    medicines: "‡¶î‡¶∑‡¶ß",
    exercise: "‡¶¨‡ßç‡¶Ø‡¶æ‡¶Ø‡¶º‡¶æ‡¶Æ",
    today: "‡¶Ü‡¶ú‡¶ø",
    dosesTaken: "‡¶Ü‡¶ú‡¶ø ‡¶≤‡ßã‡ß±‡¶æ ‡¶°‡ßã‡¶ú",
    completed: "‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡ß∞‡ßç‡¶£!",
    activitiesDone: "‡¶ï‡ß∞‡¶æ ‡¶ï‡¶æ‡ß∞‡ßç‡¶Ø‡¶ï‡¶≤‡¶æ‡¶™",
    todaysMedicines: "‡¶Ü‡¶ú‡¶ø‡ß∞ ‡¶î‡¶∑‡¶ß",
    noMedicinesScheduled: "‡¶ï‡ßã‡¶®‡ßã ‡¶î‡¶∑‡¶ß ‡¶®‡¶ø‡ß∞‡ßç‡¶ß‡¶æ‡ß∞‡¶ø‡¶§ ‡¶®‡¶π‡¶Ø‡¶º",
    addMedicinesBtn: "‡¶î‡¶∑‡¶ß ‡¶Ø‡ßã‡¶ó ‡¶ï‡ß∞‡¶ï",
    morningExercise: "‡ß∞‡¶æ‡¶§‡¶ø‡¶™‡ßÅ‡ß±‡¶æ‡ß∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶Ø‡¶º‡¶æ‡¶Æ",
    ageRestriction: "‡¶¨‡¶Ø‡¶º‡¶∏‡ß∞ ‡¶∏‡ßÄ‡¶Æ‡¶æ‡¶¨‡¶¶‡ßç‡¶ß‡¶§‡¶æ",
    availableFor12Plus: "‡ßß‡ß® ‡¶¨‡¶õ‡ß∞‡ß∞ ‡¶ì‡¶™‡ß∞‡ß∞ ‡¶¨‡¶æ‡¶¨‡ßá ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß",
    consultDoctor: "‚ö†Ô∏è ‡¶™‡ßç‡ß∞‡¶•‡¶Æ‡ßá ‡¶Ü‡¶™‡ßã‡¶®‡¶æ‡ß∞ ‡¶ö‡¶ø‡¶ï‡¶ø‡ßé‡¶∏‡¶ï‡ß∞ ‡¶™‡ß∞‡¶æ‡¶Æ‡ß∞‡ßç‡¶∂ ‡¶≤‡¶ì‡¶ï",
    markAllDone: "‡¶∏‡¶ï‡¶≤‡ßã ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡ß∞‡ßç‡¶£ ‡¶ö‡¶ø‡¶π‡ßç‡¶®‡¶ø‡¶§ ‡¶ï‡ß∞‡¶ï",
    allDoneToday: "‚úì ‡¶∏‡¶ï‡¶≤‡ßã ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡ß∞‡ßç‡¶£!",
    myMedicines: "‡¶Æ‡ßã‡ß∞ ‡¶î‡¶∑‡¶ß",
    manageMedication: "‡¶Ü‡¶™‡ßã‡¶®‡¶æ‡ß∞ ‡¶î‡¶∑‡¶ß‡ß∞ ‡¶∏‡ßÇ‡¶ö‡ßÄ ‡¶™‡ß∞‡¶ø‡¶ö‡¶æ‡¶≤‡¶®‡¶æ ‡¶ï‡ß∞‡¶ï",
    addMedicine: "‡¶î‡¶∑‡¶ß ‡¶Ø‡ßã‡¶ó ‡¶ï‡ß∞‡¶ï",
    addNewMedicine: "‡¶®‡¶§‡ßÅ‡¶® ‡¶î‡¶∑‡¶ß ‡¶Ø‡ßã‡¶ó ‡¶ï‡ß∞‡¶ï",
    medicineName: "‡¶î‡¶∑‡¶ß‡ß∞ ‡¶®‡¶æ‡¶Æ",
    dosage: "‡¶°‡ßã‡¶ú",
    egAspirin: "‡¶Ø‡ßá‡¶®‡ßá, ‡¶è‡¶õ‡¶™‡¶ø‡ß∞‡¶ø‡¶®",
    eg100mg: "‡¶Ø‡ßá‡¶®‡ßá, ‡ßß‡ß¶‡ß¶‡¶è‡¶Æ‡¶ú‡¶ø",
    saveMedicine: "‡¶î‡¶∑‡¶ß ‡¶∏‡¶Ç‡ß∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡ß∞‡¶ï",
    cancel: "‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡ß∞‡¶ï",
    noMedicinesAdded: "‡¶è‡¶§‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤‡ßà‡¶ï‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶î‡¶∑‡¶ß ‡¶Ø‡ßã‡¶ó ‡¶ï‡ß∞‡¶æ ‡¶π‡ßã‡ß±‡¶æ ‡¶®‡¶æ‡¶á",
    clickToAdd: "‡¶Ü‡ß∞‡¶Æ‡ßç‡¶≠ ‡¶ï‡ß∞‡¶ø‡¶¨‡¶≤‡ßà \"‡¶î‡¶∑‡¶ß ‡¶Ø‡ßã‡¶ó ‡¶ï‡ß∞‡¶ï\" ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡ß∞‡¶ï",
    healthAI: "‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶è‡¶Ü‡¶á ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶ï",
    askAboutSymptoms: "‡¶≤‡¶ï‡ßç‡¶∑‡¶£, ‡¶î‡¶∑‡¶ß ‡¶¨‡¶æ ‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶™‡ß∞‡¶æ‡¶Æ‡ß∞‡ßç‡¶∂‡ß∞ ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡ßá ‡¶∏‡ßã‡¶ß‡¶ï",
    askQuestion: "‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶™‡ßç‡ß∞‡¶∂‡ßç‡¶® ‡¶∏‡ßã‡¶ß‡¶ï...",
    emergencyWarning: "‚ö†Ô∏è ‡¶ú‡ß∞‡ßÅ‡ß∞‡ßÄ‡¶ï‡¶æ‡¶≤‡ßÄ‡¶®‡ß∞ ‡¶¨‡¶æ‡¶¨‡ßá ‡ßß‡ß¶‡ßÆ ‡¶ï‡¶≤ ‡¶ï‡ß∞‡¶ï ‡¶¨‡¶æ ‡¶π‡¶∏‡ßç‡¶™‡¶ø‡¶ü‡ßá‡¶≤ ‡¶ü‡ßá‡¶¨ ‡¶ö‡¶æ‡¶ì‡¶ï",
    nearbyHospitals: "‡¶ì‡¶ö‡ß∞‡ß∞ ‡¶π‡¶∏‡ßç‡¶™‡¶ø‡¶ü‡ßá‡¶≤",
    findEmergencyCare: "‡¶Ü‡¶™‡ßã‡¶®‡¶æ‡ß∞ ‡¶ì‡¶ö‡ß∞‡¶§ ‡¶ú‡ß∞‡ßÅ‡ß∞‡ßÄ‡¶ï‡¶æ‡¶≤‡ßÄ‡¶® ‡¶∏‡ßá‡ß±‡¶æ ‡¶¨‡¶ø‡¶ö‡¶æ‡ß∞‡¶ï",
    enableLocation: "‡¶∏‡ßç‡¶•‡¶æ‡¶® ‡¶∏‡ßá‡ß±‡¶æ ‡¶∏‡¶ï‡ßç‡¶∑‡¶Æ ‡¶ï‡ß∞‡¶ï",
    allowLocation: "‡¶π‡¶∏‡ßç‡¶™‡¶ø‡¶ü‡ßá‡¶≤ ‡¶¨‡¶ø‡¶ö‡¶æ‡ß∞‡¶ø‡¶¨‡¶≤‡ßà ‡¶∏‡ßç‡¶•‡¶æ‡¶®‡ß∞ ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶¶‡¶ø‡¶Ø‡¶º‡¶ï",
    getMyLocation: "‡¶Æ‡ßã‡ß∞ ‡¶∏‡ßç‡¶•‡¶æ‡¶® ‡¶≤‡¶ì‡¶ï",
    gettingLocation: "‡¶∏‡ßç‡¶•‡¶æ‡¶® ‡¶≤‡ßã‡ß±‡¶æ ‡¶π‡ßà‡¶õ‡ßá...",
    locationFound: "‚úì ‡¶∏‡ßç‡¶•‡¶æ‡¶® ‡¶™‡ßã‡ß±‡¶æ ‡¶ó‡ßà‡¶õ‡ßá! ‡¶ì‡¶ö‡ß∞‡ß∞ ‡¶π‡¶∏‡ßç‡¶™‡¶ø‡¶ü‡ßá‡¶≤ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶ì‡ß±‡¶æ ‡¶π‡ßà‡¶õ‡ßá",
    refresh: "‡ß∞‡¶ø‡¶´‡ßç‡ß∞‡ßá‡¶∂",
    emergencyServices: "üö® ‡¶ú‡ß∞‡ßÅ‡ß∞‡ßÄ‡¶ï‡¶æ‡¶≤‡ßÄ‡¶® ‡¶∏‡ßá‡ß±‡¶æ",
    directions: "‡¶¶‡¶ø‡¶∂",
    callNow: "‡¶è‡¶§‡¶ø‡¶Ø‡¶º‡¶æ‡¶á ‡¶ï‡¶≤ ‡¶ï‡ß∞‡¶ï",
    emergencyInfo: "‡¶ú‡ß∞‡ßÅ‡ß∞‡ßÄ‡¶ï‡¶æ‡¶≤‡ßÄ‡¶® ‡¶§‡¶•‡ßç‡¶Ø",
    call911: "‡ßß‡ß¶‡ßÆ ‡¶ï‡¶≤ ‡¶ï‡ß∞‡¶ï - ‡¶ú‡ß∞‡ßÅ‡ß∞‡ßÄ‡¶ï‡¶æ‡¶≤‡ßÄ‡¶® ‡¶∏‡ßá‡ß±‡¶æ",
    call911For: "‡ßß‡ß¶‡ßÆ ‡¶ï‡¶≤ ‡¶ï‡ß∞‡¶ï: ‡¶¨‡ßÅ‡¶ï‡ßÅ‡ß∞ ‡¶¨‡¶ø‡¶∑, ‡¶∂‡ßç‡¶¨‡¶æ‡¶∏-‡¶™‡ßç‡ß∞‡¶∂‡ßç‡¶¨‡¶æ‡¶∏‡ß∞ ‡¶Ö‡¶∏‡ßÅ‡¶¨‡¶ø‡¶ß‡¶æ, ‡¶ó‡ßÅ‡ß∞‡ßÅ‡¶§‡ß∞ ‡ß∞‡¶ï‡ßç‡¶§‡¶ï‡ßç‡¶∑‡ß∞‡¶£, ‡¶∑‡ßç‡¶ü‡ßç‡ß∞‡ßã‡¶ï‡ß∞ ‡¶≤‡¶ï‡ßç‡¶∑‡¶£‡•§",
    profileSettings: "‡¶™‡ßç‡ß∞'‡¶´‡¶æ‡¶á‡¶≤ ‡¶õ‡ßá‡¶ü‡¶ø‡¶Ç‡¶õ",
    manageInfo: "‡¶Ü‡¶™‡ßã‡¶®‡¶æ‡ß∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶Ü‡ß∞‡ßÅ ‡¶™‡¶õ‡¶®‡ßç‡¶¶ ‡¶™‡ß∞‡¶ø‡¶ö‡¶æ‡¶≤‡¶®‡¶æ ‡¶ï‡ß∞‡¶ï",
    name: "‡¶®‡¶æ‡¶Æ",
    age: "‡¶¨‡¶Ø‡¶º‡¶∏",
    saveChanges: "‡¶™‡ß∞‡¶ø‡ß±‡ß∞‡ßç‡¶§‡¶® ‡¶∏‡¶Ç‡ß∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡ß∞‡¶ï",
    editProfile: "‡¶™‡ßç‡ß∞'‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶Æ‡ßç‡¶™‡¶æ‡¶¶‡¶®‡¶æ ‡¶ï‡ß∞‡¶ï",
    appearance: "‡ß∞‡ßÇ‡¶™",
    darkMode: "‡¶°‡¶æ‡ß∞‡ßç‡¶ï ‡¶Æ‡ßã‡¶°",
    enabled: "‡¶∏‡¶ï‡ßç‡¶∑‡¶Æ",
    disabled: "‡¶Ö‡¶ï‡ßç‡¶∑‡¶Æ",
    healthStats: "‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶™‡ß∞‡¶ø‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ",
    totalMedicines: "‡¶Æ‡ßÅ‡¶† ‡¶î‡¶∑‡¶ß",
    exercisePlanTime: "‡¶¨‡ßç‡¶Ø‡¶æ‡¶Ø‡¶º‡¶æ‡¶Æ ‡¶™‡ß∞‡¶ø‡¶ï‡¶≤‡ßç‡¶™‡¶®‡¶æ",
    helpTutorial: "‡¶∏‡¶π‡¶æ‡¶Ø‡¶º ‡¶Ü‡ß∞‡ßÅ ‡¶ü‡¶ø‡¶â‡¶ü‡ß∞‡¶ø‡¶Ø‡¶º‡ßá‡¶≤",
    hospitals: "‡¶π‡¶∏‡ßç‡¶™‡¶ø‡¶ü‡ßá‡¶≤",
    profile: "‡¶™‡ßç‡ß∞'‡¶´‡¶æ‡¶á‡¶≤",
    home: "‡¶Æ‡ßÇ‡¶≤ ‡¶™‡ßÉ‡¶∑‡ßç‡¶†‡¶æ",
    chatbotGreeting: "‡¶®‡¶Æ‡¶∏‡ßç‡¶ï‡¶æ‡ß∞! ‡¶Æ‡¶á ‡¶Ü‡¶™‡ßã‡¶®‡¶æ‡ß∞ ‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶ï‡•§ ‡¶Æ‡¶á ‡¶≤‡¶ï‡ßç‡¶∑‡¶£, ‡ß∞‡ßã‡¶ó, ‡¶î‡¶∑‡¶ß ‡¶Ü‡ß∞‡ßÅ ‡¶∏‡¶æ‡¶ß‡¶æ‡ß∞‡¶£ ‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶™‡ß∞‡¶æ‡¶Æ‡ß∞‡ßç‡¶∂‡ß∞ ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡ßá ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º ‡¶ï‡ß∞‡¶ø‡¶¨ ‡¶™‡¶æ‡ß∞‡ßã‡•§ ‡¶Ü‡¶™‡ßÅ‡¶®‡¶ø ‡¶ï‡¶ø ‡¶ú‡¶æ‡¶®‡¶ø‡¶¨ ‡¶¨‡¶ø‡¶ö‡¶æ‡ß∞‡ßá?",
    selectLanguage: "‡¶≠‡¶æ‡¶∑‡¶æ ‡¶®‡¶ø‡ß∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡ß∞‡¶ï",
    exercises: {
      warmup: "‡ß±‡¶æ‡ß∞‡ßç‡¶Æ-‡¶Ü‡¶™: ‡¶≤‡¶æ‡¶π‡ßá ‡¶≤‡¶æ‡¶π‡ßá ‡¶ñ‡ßã‡¶ú ‡¶ï‡¶æ‡¶¢‡¶º‡¶æ",
      seatedMarching: "‡ß±‡¶æ‡ß∞‡ßç‡¶Æ-‡¶Ü‡¶™: ‡¶¨‡¶π‡¶ø ‡¶Æ‡¶æ‡ß∞‡ßç‡¶ö‡¶ø‡¶Ç",
      seatedMovements: "‡ß±‡¶æ‡ß∞‡ßç‡¶Æ-‡¶Ü‡¶™: ‡¶¨‡¶π‡¶ø ‡¶≤‡ß∞‡¶ö‡ß∞",
      briskWalking: "‡¶¶‡ßç‡ß∞‡ßÅ‡¶§ ‡¶ñ‡ßã‡¶ú ‡¶¨‡¶æ ‡¶≤‡ß∞‡¶ø‡¶¨‡¶≤‡ßà",
      gentleWalking: "‡¶≤‡¶æ‡¶π‡ßá ‡¶≤‡¶æ‡¶π‡ßá ‡¶ñ‡ßã‡¶ú",
      seatedWalking: "‡¶¨‡¶π‡¶ø ‡¶ñ‡ßã‡¶ú",
      strength: "‡¶∂‡¶ï‡ßç‡¶§‡¶ø: ‡¶∏‡ßç‡¶ï‡ßã‡ß±‡¶æ‡¶ü, ‡¶™‡ßÅ‡¶õ-‡¶Ü‡¶™",
      chairExercises: "‡¶ö‡ßá‡¶Ø‡¶º‡¶æ‡ß∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶Ø‡¶º‡¶æ‡¶Æ",
      balance: "‡¶≠‡¶æ‡ß∞‡¶∏‡¶æ‡¶Æ‡ßç‡¶Ø ‡¶¨‡ßç‡¶Ø‡¶æ‡¶Ø‡¶º‡¶æ‡¶Æ",
      balanceSupport: "‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡ß∞‡ßá ‡¶≠‡¶æ‡ß∞‡¶∏‡¶æ‡¶Æ‡ßç‡¶Ø",
      handExercises: "‡¶π‡¶æ‡¶§‡ß∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶Ø‡¶º‡¶æ‡¶Æ",
      stretching: "‡¶∑‡ßç‡¶ü‡ßç‡ß∞‡ßá‡¶ö‡¶ø‡¶Ç",
      gentleStretching: "‡¶≤‡¶æ‡¶π‡ßá ‡¶∑‡ßç‡¶ü‡ßç‡ß∞‡ßá‡¶ö‡¶ø‡¶Ç",
      coolDown: "‡¶∂‡ßÄ‡¶§‡¶≤ ‡¶ï‡ß∞‡¶æ",
      breathing: "‡¶∂‡ßç‡¶¨‡¶æ‡¶∏-‡¶™‡ßç‡ß∞‡¶∂‡ßç‡¶¨‡¶æ‡¶∏ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶Ø‡¶º‡¶æ‡¶Æ",
      deepBreathing: "‡¶¶‡ßÄ‡¶ò‡¶≤ ‡¶∂‡ßç‡¶¨‡¶æ‡¶∏",
      low: "‡¶ï‡¶Æ",
      veryLow: "‡¶Ö‡¶§‡¶ø ‡¶ï‡¶Æ",
      lowModerate: "‡¶ï‡¶Æ-‡¶Æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßÄ‡¶Ø‡¶º‡¶æ",
      moderate: "‡¶Æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßÄ‡¶Ø‡¶º‡¶æ"
    },
    chatResponses: {
      greeting: "‡¶®‡¶Æ‡¶∏‡ßç‡¶ï‡¶æ‡ß∞! ‡¶Æ‡¶á ‡¶Ü‡¶™‡ßã‡¶®‡¶æ‡ß∞ ‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶ï‡•§ ‡¶Æ‡¶á ‡¶≤‡¶ï‡ßç‡¶∑‡¶£, ‡ß∞‡ßã‡¶ó, ‡¶î‡¶∑‡¶ß ‡¶Ü‡ß∞‡ßÅ ‡¶∏‡¶æ‡¶ß‡¶æ‡ß∞‡¶£ ‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶™‡ß∞‡¶æ‡¶Æ‡ß∞‡ßç‡¶∂‡ß∞ ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡ßá ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º ‡¶ï‡ß∞‡¶ø‡¶¨ ‡¶™‡¶æ‡ß∞‡ßã‡•§ ‡¶Ü‡¶™‡ßÅ‡¶®‡¶ø ‡¶ï‡¶ø ‡¶ú‡¶æ‡¶®‡¶ø‡¶¨ ‡¶¨‡¶ø‡¶ö‡¶æ‡ß∞‡ßá?",
      welcome: "‡¶Ü‡¶™‡ßã‡¶®‡¶æ‡¶ï ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ! ‡¶∏‡ßÅ‡¶∏‡ßç‡¶• ‡¶•‡¶æ‡¶ï‡¶ï ‡¶Ü‡ß∞‡ßÅ ‡¶¨‡ßç‡¶Ø‡¶ï‡ßç‡¶§‡¶ø‡¶ó‡¶§ ‡¶™‡ß∞‡¶æ‡¶Æ‡ß∞‡ßç‡¶∂‡ß∞ ‡¶¨‡¶æ‡¶¨‡ßá ‡¶ö‡¶ø‡¶ï‡¶ø‡ßé‡¶∏‡¶ï‡ß∞ ‡¶™‡ß∞‡¶æ‡¶Æ‡ß∞‡ßç‡¶∂ ‡¶≤‡¶ì‡¶ï‡•§",
      headache: "‡¶Æ‡ßÇ‡ß∞‡ß∞ ‡¶¨‡¶ø‡¶∑‡ß∞ ‡¶¨‡¶æ‡¶¨‡ßá:\n‚Ä¢ ‡¶∂‡¶æ‡¶®‡ßç‡¶§, ‡¶Ü‡¶®‡ßç‡¶ß‡¶æ‡ß∞ ‡¶ï‡ßã‡¶†‡¶æ‡¶§ ‡¶¨‡¶ø‡¶∂‡ßç‡ß∞‡¶æ‡¶Æ ‡¶≤‡¶ì‡¶ï\n‚Ä¢ ‡¶™‡¶æ‡¶®‡ßÄ ‡¶ñ‡¶æ‡¶ì‡¶ï\n‚Ä¢ ‡¶†‡¶æ‡¶£‡ßç‡¶°‡¶æ ‡¶∏‡ßá‡¶ï ‡¶¶‡¶ø‡¶Ø‡¶º‡¶ï\n‚Ä¢ ‡¶â‡¶ú‡ßç‡¶ú‡ßç‡¶¨‡¶≤ ‡¶™‡ßã‡¶π‡ß∞ ‡¶è‡ß∞‡¶æ‡¶á ‡¶ö‡¶≤‡¶ï\n\n‡¶ó‡ßÅ‡ß∞‡ßÅ‡¶§‡ß∞ ‡¶¨‡¶æ ‡¶ú‡ßç‡¶¨‡ß∞‡ß∞ ‡¶∏‡ßà‡¶§‡ßá ‡¶π'‡¶≤‡ßá ‡¶ö‡¶ø‡¶ï‡¶ø‡ßé‡¶∏‡¶ï ‡¶¶‡ßá‡¶ñ‡ßÅ‡ß±‡¶æ‡¶ì‡¶ï‡•§",
      fever: "‡¶ú‡ßç‡¶¨‡ß∞‡ß∞ ‡¶¨‡¶æ‡¶¨‡ßá:\n‚Ä¢ ‡¶¨‡¶ø‡¶∂‡ßç‡ß∞‡¶æ‡¶Æ ‡¶≤‡¶ì‡¶ï ‡¶Ü‡ß∞‡ßÅ ‡¶§‡ß∞‡¶≤ ‡¶™‡¶¶‡¶æ‡ß∞‡ßç‡¶• ‡¶ñ‡¶æ‡¶ì‡¶ï\n‚Ä¢ ‡¶®‡¶ø‡ß∞‡ßç‡¶¶‡ßá‡¶∂ ‡¶Ö‡¶®‡ßÅ‡¶∏‡ß∞‡¶ø ‡¶è‡¶ö‡¶ø‡¶ü‡¶æ‡¶Æ‡¶ø‡¶®‡ßã‡¶´‡ßá‡¶® ‡¶≤‡¶ì‡¶ï\n‚Ä¢ ‡¶†‡¶æ‡¶£‡ßç‡¶°‡¶æ ‡¶∏‡ßá‡¶ï ‡¶¨‡ßç‡¶Ø‡ß±‡¶π‡¶æ‡ß∞ ‡¶ï‡ß∞‡¶ï\n\n‡ßß‡ß¶‡ß©¬∞F ‡ß∞ ‡¶ì‡¶™‡ß∞‡¶§ ‡¶¨‡¶æ ‡ß©+ ‡¶¶‡¶ø‡¶® ‡¶•‡¶æ‡¶ï‡¶ø‡¶≤‡ßá ‡¶ö‡¶ø‡¶ï‡¶ø‡ßé‡¶∏‡¶ï‡¶ï ‡¶´‡ßã‡¶® ‡¶ï‡ß∞‡¶ï‡•§",
      cough: "‡¶ï‡¶æ‡¶π/‡¶ö‡ß∞‡ßç‡¶¶‡¶ø‡ß∞ ‡¶¨‡¶æ‡¶¨‡ßá:\n‚Ä¢ ‡¶ó‡ß∞‡¶Æ ‡¶§‡ß∞‡¶≤ ‡¶™‡¶¶‡¶æ‡ß∞‡ßç‡¶• ‡¶ñ‡¶æ‡¶ì‡¶ï\n‚Ä¢ ‡¶π‡¶ø‡¶â‡¶Æ‡¶ø‡¶°‡¶ø‡¶´‡¶æ‡¶Ø‡¶º‡¶æ‡ß∞ ‡¶¨‡ßç‡¶Ø‡ß±‡¶π‡¶æ‡ß∞ ‡¶ï‡ß∞‡¶ï\n‚Ä¢ ‡¶≠‡¶æ‡¶≤‡¶¶‡ß∞‡ßá ‡¶¨‡¶ø‡¶∂‡ßç‡ß∞‡¶æ‡¶Æ ‡¶≤‡¶ì‡¶ï\n‚Ä¢ ‡¶™‡¶æ‡¶®‡ßÄ ‡¶ñ‡¶æ‡¶á ‡¶•‡¶æ‡¶ï‡¶ï\n\n‡ß©+ ‡¶∏‡¶™‡ßç‡¶§‡¶æ‡¶π ‡¶•‡¶æ‡¶ï‡¶ø‡¶≤‡ßá ‡¶¨‡¶æ ‡¶§‡ßá‡¶ú ‡¶ì‡¶≤‡¶æ‡¶≤‡ßá ‡¶ö‡¶ø‡¶ï‡¶ø‡ßé‡¶∏‡¶ï ‡¶¶‡ßá‡¶ñ‡ßÅ‡ß±‡¶æ‡¶ì‡¶ï‡•§",
      chest: "üö® ‡¶ú‡ß∞‡ßÅ‡ß∞‡ßÄ‡¶ï‡¶æ‡¶≤‡ßÄ‡¶®! ‡¶¨‡ßÅ‡¶ï‡ßÅ‡ß∞ ‡¶¨‡¶ø‡¶∑‡ß∞ ‡¶¨‡¶æ‡¶¨‡ßá ‡¶§‡ßé‡¶ï‡ßç‡¶∑‡¶£‡¶æ‡ßé ‡ßß‡ß¶‡ßÆ ‡¶ï‡¶≤ ‡¶ï‡ß∞‡¶ï‡•§",
      stroke: "üö® ‡¶ú‡ß∞‡ßÅ‡ß∞‡ßÄ‡¶ï‡¶æ‡¶≤‡ßÄ‡¶®! FAST ‡¶™‡ß∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ: ‡¶Æ‡ßÅ‡¶ñ ‡¶π‡¶æ‡¶Å‡¶π‡¶ø‡¶õ‡ßá? ‡¶π‡¶æ‡¶§ ‡¶¶‡ßÅ‡ß∞‡ßç‡¶¨‡¶≤? ‡¶ï‡¶•‡¶æ ‡¶ï‡ßã‡ß±‡¶æ‡¶§ ‡¶Ö‡¶∏‡ßÅ‡¶¨‡¶ø‡¶ß‡¶æ? ‡ßß‡ß¶‡ßÆ ‡¶ï‡¶≤ ‡¶ï‡ß∞‡¶ï!",
      diabetes: "‡¶°‡¶æ‡¶Ø‡¶º‡ßá‡¶¨‡ßá‡¶ü‡¶ø‡¶õ ‡¶™‡ß∞‡¶ø‡¶ö‡¶æ‡¶≤‡¶®‡¶æ:\n‚Ä¢ ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ‡ßÄ‡¶Ø‡¶º‡¶æ‡¶ï‡ßà ‡¶§‡ßá‡¶ú‡ß∞ ‡¶ö‡ßá‡¶®‡¶ø ‡¶™‡ß∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡ß∞‡¶ï\n‚Ä¢ ‡¶®‡¶ø‡ß∞‡ßç‡¶¶‡ßá‡¶∂ ‡¶Ö‡¶®‡ßÅ‡¶∏‡ß∞‡¶ø ‡¶î‡¶∑‡¶ß ‡¶≤‡¶ì‡¶ï\n‚Ä¢ ‡¶∏‡ßÅ‡¶∑‡¶Æ ‡¶Ü‡¶π‡¶æ‡ß∞\n‚Ä¢ ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ‡ßÄ‡¶Ø‡¶º‡¶æ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶Ø‡¶º‡¶æ‡¶Æ\n\n‡¶Ü‡¶™‡ßã‡¶®‡¶æ‡ß∞ ‡¶ö‡¶ø‡¶ï‡¶ø‡ßé‡¶∏‡¶ï‡ß∞ ‡¶®‡¶ø‡ß∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶≤‡¶ï‡ßç‡¶∑‡ßç‡¶Ø ‡¶Ö‡¶®‡ßÅ‡¶∏‡ß∞‡¶£ ‡¶ï‡ß∞‡¶ï‡•§",
      bp: "‡ß∞‡¶ï‡ßç‡¶§‡¶ö‡¶æ‡¶™‡ß∞ ‡¶™‡ß∞‡¶æ‡¶Æ‡ß∞‡ßç‡¶∂:\n‚Ä¢ ‡¶®‡¶ø‡¶Æ‡¶ñ ‡¶ï‡¶Æ ‡¶ï‡ß∞‡¶ï\n‚Ä¢ ‡¶¶‡ßà‡¶®‡¶ø‡¶ï ‡¶¨‡ßç‡¶Ø‡¶æ‡¶Ø‡¶º‡¶æ‡¶Æ ‡¶ï‡ß∞‡¶ï\n‚Ä¢ ‡¶∏‡ßÅ‡¶∏‡ßç‡¶• ‡¶ì‡¶ú‡¶® ‡¶¨‡¶ú‡¶æ‡¶á ‡ß∞‡¶æ‡¶ñ‡¶ï\n‚Ä¢ ‡¶®‡¶ø‡ß∞‡ßç‡¶¶‡ßá‡¶∂ ‡¶Ö‡¶®‡ßÅ‡¶∏‡ß∞‡¶ø ‡¶î‡¶∑‡¶ß ‡¶≤‡¶ì‡¶ï\n\n‡¶∏‡ßç‡¶¨‡¶æ‡¶≠‡¶æ‡ß±‡¶ø‡¶ï: ‡ßß‡ß®‡ß¶/‡ßÆ‡ß¶ ‡¶§‡¶≤‡¶§",
      default: "‡¶Æ‡¶á ‡¶≤‡¶ï‡ßç‡¶∑‡¶£, ‡ß∞‡ßã‡¶ó, ‡¶î‡¶∑‡¶ß ‡¶Ü‡ß∞‡ßÅ ‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶™‡ß∞‡¶æ‡¶Æ‡ß∞‡ßç‡¶∂‡ß∞ ‡¶∏‡ßà‡¶§‡ßá ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º ‡¶ï‡ß∞‡¶ø‡¶¨ ‡¶™‡¶æ‡ß∞‡ßã‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡ß∞‡¶π ‡¶ï‡ß∞‡¶ø ‡¶Ü‡¶™‡ßã‡¶®‡¶æ‡ß∞ ‡¶™‡ßç‡ß∞‡¶∂‡ßç‡¶® ‡¶∏‡ßã‡¶ß‡¶ï‡•§ ‡¶ó‡ßÅ‡ß∞‡ßÅ‡¶§‡ß∞ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡ß∞ ‡¶¨‡¶æ‡¶¨‡ßá ‡¶∏‡¶¶‡¶æ‡¶Ø‡¶º ‡¶ö‡¶ø‡¶ï‡¶ø‡ßé‡¶∏‡¶ï‡ß∞ ‡¶™‡ß∞‡¶æ‡¶Æ‡ß∞‡ßç‡¶∂ ‡¶≤‡¶ì‡¶ï!"
    }
  },
  hi: {
    name: "‡§π‡§ø‡§®‡•ç‡§¶‡•Ä",
    appTitle: "‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ü‡•ç‡§∞‡•à‡§ï‡§∞",
    welcome: "‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à!",
    welcomeDesc: "‡§¶‡§µ‡§æ‡§á‡§Ø‡§æ‡§Å ‡§î‡§∞ ‡§µ‡•ç‡§Ø‡§æ‡§Ø‡§æ‡§Æ ‡§Ü‡§∏‡§æ‡§®‡•Ä ‡§∏‡•á ‡§ü‡•ç‡§∞‡•à‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§",
    enterInfo: "‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¶‡•á‡§Ç",
    enterInfoDesc: "‡§π‡§Æ‡•á‡§Ç ‡§Ö‡§™‡§®‡§æ ‡§®‡§æ‡§Æ ‡§î‡§∞ ‡§â‡§Æ‡•ç‡§∞ ‡§¨‡§§‡§æ‡§è‡§Ç‡•§",
    dashboard: "‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§°",
    dashboardDesc: "‡§Ö‡§™‡§®‡•Ä ‡§™‡•ç‡§∞‡§ó‡§§‡§ø ‡§è‡§ï ‡§®‡§ú‡§º‡§∞ ‡§Æ‡•á‡§Ç ‡§¶‡•á‡§ñ‡•á‡§Ç‡•§",
    addMedicines: "‡§¶‡§µ‡§æ‡§á‡§Ø‡§æ‡§Å ‡§ú‡•ã‡§°‡§º‡•á‡§Ç",
    addMedicinesDesc: "‡§¶‡§µ‡§æ‡§á‡§Ø‡§æ‡§Å ‡§ú‡•ã‡§°‡§º‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è '‡§¶‡§µ‡§æ‡§á‡§Ø‡§æ‡§Å' ‡§™‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§",
    checkOff: "‡§ö‡•á‡§ï ‡§ï‡§∞‡•á‡§Ç",
    checkOffDesc: "‡§≤‡•Ä ‡§ó‡§à ‡§¶‡§µ‡§æ‡§á‡§Ø‡•ã‡§Ç ‡§ï‡•ã ‡§ö‡§ø‡§π‡•ç‡§®‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç‡•§",
    exercisePlan: "‡§µ‡•ç‡§Ø‡§æ‡§Ø‡§æ‡§Æ ‡§Ø‡•ã‡§ú‡§®‡§æ",
    exercisePlanDesc: "‡§Ö‡§™‡§®‡•Ä 45 ‡§Æ‡§ø‡§®‡§ü ‡§ï‡•Ä ‡§¶‡§ø‡§®‡§ö‡§∞‡•ç‡§Ø‡§æ ‡§¶‡•á‡§ñ‡•á‡§Ç‡•§",
    trackProgress: "‡§™‡•ç‡§∞‡§ó‡§§‡§ø ‡§ü‡•ç‡§∞‡•à‡§ï ‡§ï‡§∞‡•á‡§Ç",
    trackProgressDesc: "‡§µ‡•ç‡§Ø‡§æ‡§Ø‡§æ‡§Æ ‡§ö‡•á‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§",
    allSet: "‡§∏‡§¨ ‡§§‡•à‡§Ø‡§æ‡§∞!",
    allSetDesc: "‡§∞‡•ã‡§ú‡§º‡§æ‡§®‡§æ ‡§ö‡•á‡§ï ‡§ï‡§∞‡•á‡§Ç!",
    skip: "‡§õ‡•ã‡§°‡§º‡•á‡§Ç",
    back: "‡§™‡•Ä‡§õ‡•á",
    next: "‡§Ü‡§ó‡•á",
    getStarted: "‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç",
    yourName: "‡§Ü‡§™‡§ï‡§æ ‡§®‡§æ‡§Æ",
    yourAge: "‡§Ü‡§™‡§ï‡•Ä ‡§â‡§Æ‡•ç‡§∞",
    enterName: "‡§Ö‡§™‡§®‡§æ ‡§®‡§æ‡§Æ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç",
    enterAge: "‡§Ö‡§™‡§®‡•Ä ‡§â‡§Æ‡•ç‡§∞ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç",
    saveProfile: "‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤ ‡§∏‡§π‡•á‡§ú‡•á‡§Ç",
    welcomeBack: "‡§µ‡§æ‡§™‡§∏ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à! ‡§Ø‡§π‡§æ‡§Ç ‡§Ü‡§ú ‡§ï‡§æ ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡§æ‡§∞‡§æ‡§Ç‡§∂ ‡§π‡•à‡•§",
    medicines: "‡§¶‡§µ‡§æ‡§á‡§Ø‡§æ‡§Å",
    exercise: "‡§µ‡•ç‡§Ø‡§æ‡§Ø‡§æ‡§Æ",
    today: "‡§Ü‡§ú",
    dosesTaken: "‡§Ü‡§ú ‡§≤‡•Ä ‡§ó‡§à ‡§ñ‡•Å‡§∞‡§æ‡§ï",
    completed: "‡§™‡•Ç‡§∞‡•ç‡§£!",
    activitiesDone: "‡§™‡•Ç‡§∞‡•ç‡§£ ‡§ó‡§§‡§ø‡§µ‡§ø‡§ß‡§ø‡§Ø‡§æ‡§Å",
    todaysMedicines: "‡§Ü‡§ú ‡§ï‡•Ä ‡§¶‡§µ‡§æ‡§á‡§Ø‡§æ‡§Å",
    noMedicinesScheduled: "‡§ï‡•ã‡§à ‡§¶‡§µ‡§æ‡§à ‡§®‡§ø‡§∞‡•ç‡§ß‡§æ‡§∞‡§ø‡§§ ‡§®‡§π‡•Ä‡§Ç",
    addMedicinesBtn: "‡§¶‡§µ‡§æ‡§á‡§Ø‡§æ‡§Å ‡§ú‡•ã‡§°‡§º‡•á‡§Ç",
    morningExercise: "‡§∏‡•Å‡§¨‡§π ‡§ï‡§æ ‡§µ‡•ç‡§Ø‡§æ‡§Ø‡§æ‡§Æ",
    ageRestriction: "‡§â‡§Æ‡•ç‡§∞ ‡§™‡•ç‡§∞‡§§‡§ø‡§¨‡§Ç‡§ß",
    availableFor12Plus: "12 ‡§µ‡§∞‡•ç‡§∑ ‡§î‡§∞ ‡§â‡§∏‡§∏‡•á ‡§Ö‡§ß‡§ø‡§ï ‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§™‡§≤‡§¨‡•ç‡§ß",
    consultDoctor: "‚ö†Ô∏è ‡§™‡§π‡§≤‡•á ‡§Ö‡§™‡§®‡•á ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§™‡§∞‡§æ‡§Æ‡§∞‡•ç‡§∂ ‡§ï‡§∞‡•á‡§Ç",
    markAllDone: "‡§∏‡§≠‡•Ä ‡§ï‡•ã ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§ö‡§ø‡§π‡•ç‡§®‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç",
    allDoneToday: "‚úì ‡§∏‡§¨ ‡§™‡•Ç‡§∞‡•ç‡§£!",
    myMedicines: "‡§Æ‡•á‡§∞‡•Ä ‡§¶‡§µ‡§æ‡§á‡§Ø‡§æ‡§Å",
    manageMedication: "‡§Ö‡§™‡§®‡•Ä ‡§¶‡§µ‡§æ‡§ì‡§Ç ‡§ï‡§æ ‡§∏‡§Æ‡§Ø ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç",
    addMedicine: "‡§¶‡§µ‡§æ‡§à ‡§ú‡•ã‡§°‡§º‡•á‡§Ç",
    addNewMedicine: "‡§®‡§à ‡§¶‡§µ‡§æ‡§à ‡§ú‡•ã‡§°‡§º‡•á‡§Ç",
    medicineName: "‡§¶‡§µ‡§æ‡§à ‡§ï‡§æ ‡§®‡§æ‡§Æ",
    dosage: "‡§ñ‡•Å‡§∞‡§æ‡§ï",
    egAspirin: "‡§ú‡•à‡§∏‡•á, ‡§è‡§∏‡•ç‡§™‡§ø‡§∞‡§ø‡§®",
    eg100mg: "‡§ú‡•à‡§∏‡•á, 100‡§Æ‡§ø‡§ó‡•ç‡§∞‡§æ",
    saveMedicine: "‡§¶‡§µ‡§æ‡§à ‡§∏‡§π‡•á‡§ú‡•á‡§Ç",
    cancel: "‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡•á‡§Ç",
    noMedicinesAdded: "‡§Ö‡§≠‡•Ä ‡§§‡§ï ‡§ï‡•ã‡§à ‡§¶‡§µ‡§æ‡§à ‡§®‡§π‡•Ä‡§Ç ‡§ú‡•ã‡§°‡§º‡•Ä ‡§ó‡§à",
    clickToAdd: "‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è \"‡§¶‡§µ‡§æ‡§à ‡§ú‡•ã‡§°‡§º‡•á‡§Ç\" ‡§™‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡•á‡§Ç",
    healthAI: "‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§è‡§Ü‡§à ‡§∏‡§π‡§æ‡§Ø‡§ï",
    askAboutSymptoms: "‡§≤‡§ï‡•ç‡§∑‡§£, ‡§¶‡§µ‡§æ‡§ì‡§Ç ‡§Ø‡§æ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡§≤‡§æ‡§π ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§™‡•Ç‡§õ‡•á‡§Ç",
    askQuestion: "‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§™‡•Ç‡§õ‡•á‡§Ç...",
    emergencyWarning: "‚ö†Ô∏è ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤ ‡§ï‡•á ‡§≤‡§ø‡§è 102 ‡§™‡§∞ ‡§ï‡•â‡§≤ ‡§ï‡§∞‡•á‡§Ç ‡§Ø‡§æ ‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤ ‡§ü‡•à‡§¨ ‡§¶‡•á‡§ñ‡•á‡§Ç",
    nearbyHospitals: "‡§®‡§ú‡§¶‡•Ä‡§ï‡•Ä ‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤",
    findEmergencyCare: "‡§Ö‡§™‡§®‡•á ‡§™‡§æ‡§∏ ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§¶‡•á‡§ñ‡§≠‡§æ‡§≤ ‡§ñ‡•ã‡§ú‡•á‡§Ç",
    enableLocation: "‡§∏‡•ç‡§•‡§æ‡§® ‡§∏‡•á‡§µ‡§æ‡§è‡§Ç ‡§∏‡§ï‡•ç‡§∑‡§Æ ‡§ï‡§∞‡•á‡§Ç",
    allowLocation: "‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤ ‡§ñ‡•ã‡§ú‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•ç‡§•‡§æ‡§® ‡§ï‡•Ä ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§¶‡•á‡§Ç",
    getMyLocation: "‡§Æ‡•á‡§∞‡§æ ‡§∏‡•ç‡§•‡§æ‡§® ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç",
    gettingLocation: "‡§∏‡•ç‡§•‡§æ‡§® ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç...",
    locationFound: "‚úì ‡§∏‡•ç‡§•‡§æ‡§® ‡§Æ‡§ø‡§≤ ‡§ó‡§Ø‡§æ! ‡§®‡§ú‡§¶‡•Ä‡§ï‡•Ä ‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤ ‡§¶‡§ø‡§ñ‡§æ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç",
    refresh: "‡§∞‡•Ä‡§´‡•ç‡§∞‡•á‡§∂",
    emergencyServices: "üö® ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§∏‡•á‡§µ‡§æ‡§è‡§Ç",
    directions: "‡§¶‡§ø‡§∂‡§æ-‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂",
    callNow: "‡§Ö‡§≠‡•Ä ‡§ï‡•â‡§≤ ‡§ï‡§∞‡•á‡§Ç",
    emergencyInfo: "‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä",
    call911: "102 ‡§™‡§∞ ‡§ï‡•â‡§≤ ‡§ï‡§∞‡•á‡§Ç - ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§∏‡•á‡§µ‡§æ‡§è‡§Ç",
    call911For: "102 ‡§™‡§∞ ‡§ï‡•â‡§≤ ‡§ï‡§∞‡•á‡§Ç: ‡§∏‡•Ä‡§®‡•á ‡§Æ‡•á‡§Ç ‡§¶‡§∞‡•ç‡§¶, ‡§∏‡§æ‡§Ç‡§∏ ‡§≤‡•á‡§®‡•á ‡§Æ‡•á‡§Ç ‡§ï‡§†‡§ø‡§®‡§æ‡§à, ‡§ó‡§Ç‡§≠‡•Ä‡§∞ ‡§∞‡§ï‡•ç‡§§‡§∏‡•ç‡§∞‡§æ‡§µ, ‡§∏‡•ç‡§ü‡•ç‡§∞‡•ã‡§ï ‡§ï‡•á ‡§≤‡§ï‡•ç‡§∑‡§£‡•§",
    profileSettings: "‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤ ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏",
    manageInfo: "‡§Ö‡§™‡§®‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§î‡§∞ ‡§™‡•ç‡§∞‡§æ‡§•‡§Æ‡§ø‡§ï‡§§‡§æ‡§è‡§Ç ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç",
    name: "‡§®‡§æ‡§Æ",
    age: "‡§â‡§Æ‡•ç‡§∞",
    saveChanges: "‡§™‡§∞‡§ø‡§µ‡§∞‡•ç‡§§‡§® ‡§∏‡§π‡•á‡§ú‡•á‡§Ç",
    editProfile: "‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤ ‡§∏‡§Ç‡§™‡§æ‡§¶‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç",
    appearance: "‡§∞‡•Ç‡§™",
    darkMode: "‡§°‡§æ‡§∞‡•ç‡§ï ‡§Æ‡•ã‡§°",
    enabled: "‡§∏‡§ï‡•ç‡§∑‡§Æ",
    disabled: "‡§Ö‡§ï‡•ç‡§∑‡§Æ",
    healthStats: "‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§Ü‡§Ç‡§ï‡§°‡§º‡•á",
    totalMedicines: "‡§ï‡•Å‡§≤ ‡§¶‡§µ‡§æ‡§á‡§Ø‡§æ‡§Å",
    exercisePlanTime: "‡§µ‡•ç‡§Ø‡§æ‡§Ø‡§æ‡§Æ ‡§Ø‡•ã‡§ú‡§®‡§æ",
    helpTutorial: "‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§î‡§∞ ‡§ü‡•ç‡§Ø‡•Ç‡§ü‡•ã‡§∞‡§ø‡§Ø‡§≤",
    hospitals: "‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤",
    profile: "‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤",
    home: "‡§π‡•ã‡§Æ",
    chatbotGreeting: "‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§π‡•Ç‡§Ç‡•§ ‡§Æ‡•à‡§Ç ‡§≤‡§ï‡•ç‡§∑‡§£, ‡§∏‡•ç‡§•‡§ø‡§§‡§ø‡§Ø‡•ã‡§Ç, ‡§¶‡§µ‡§æ‡§ì‡§Ç ‡§î‡§∞ ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡§≤‡§æ‡§π ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§ ‡§Ü‡§™ ‡§ï‡•ç‡§Ø‡§æ ‡§ú‡§æ‡§®‡§®‡§æ ‡§ö‡§æ‡§π‡•á‡§Ç‡§ó‡•á?",
    selectLanguage: "‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç",
    exercises: {
      warmup: "‡§µ‡§æ‡§∞‡•ç‡§Æ-‡§Ö‡§™: ‡§ß‡•Ä‡§∞‡•á-‡§ß‡•Ä‡§∞‡•á ‡§ö‡§≤‡§®‡§æ",
      seatedMarching: "‡§µ‡§æ‡§∞‡•ç‡§Æ-‡§Ö‡§™: ‡§¨‡•à‡§†‡§ï‡§∞ ‡§Æ‡§æ‡§∞‡•ç‡§ö‡§ø‡§Ç‡§ó",
      seatedMovements: "‡§µ‡§æ‡§∞‡•ç‡§Æ-‡§Ö‡§™: ‡§¨‡•à‡§†‡§ï‡§∞ ‡§π‡§ø‡§≤‡§®‡§æ-‡§°‡•Å‡§≤‡§®‡§æ",
      briskWalking: "‡§§‡•á‡§ú ‡§ö‡§≤‡§®‡§æ ‡§Ø‡§æ ‡§ú‡•â‡§ó‡§ø‡§Ç‡§ó",
      gentleWalking: "‡§ß‡•Ä‡§∞‡•á-‡§ß‡•Ä‡§∞‡•á ‡§ö‡§≤‡§®‡§æ",
      seatedWalking: "‡§¨‡•à‡§†‡§ï‡§∞ ‡§ö‡§≤‡§®‡§æ",
      strength: "‡§∂‡§ï‡•ç‡§§‡§ø: ‡§∏‡•ç‡§ï‡•ç‡§µ‡§æ‡§ü‡•ç‡§∏, ‡§™‡•Å‡§∂-‡§Ö‡§™‡•ç‡§∏",
      chairExercises: "‡§ï‡•Å‡§∞‡•ç‡§∏‡•Ä ‡§µ‡•ç‡§Ø‡§æ‡§Ø‡§æ‡§Æ",
      balance: "‡§∏‡§Ç‡§§‡•Å‡§≤‡§® ‡§µ‡•ç‡§Ø‡§æ‡§Ø‡§æ‡§Æ",
      balanceSupport: "‡§∏‡§π‡§æ‡§∞‡•á ‡§ï‡•á ‡§∏‡§æ‡§• ‡§∏‡§Ç‡§§‡•Å‡§≤‡§®",
      handExercises: "‡§π‡§æ‡§• ‡§ï‡•á ‡§µ‡•ç‡§Ø‡§æ‡§Ø‡§æ‡§Æ",
      stretching: "‡§∏‡•ç‡§ü‡•ç‡§∞‡•á‡§ö‡§ø‡§Ç‡§ó",
      gentleStretching: "‡§ß‡•Ä‡§∞‡•á ‡§∏‡•ç‡§ü‡•ç‡§∞‡•á‡§ö‡§ø‡§Ç‡§ó",
      coolDown: "‡§ï‡•Ç‡§≤ ‡§°‡§æ‡§â‡§®",
      breathing: "‡§∏‡§æ‡§Ç‡§∏ ‡§≤‡•á‡§®‡•á ‡§ï‡•á ‡§µ‡•ç‡§Ø‡§æ‡§Ø‡§æ‡§Æ",
      deepBreathing: "‡§ó‡§π‡§∞‡•Ä ‡§∏‡§æ‡§Ç‡§∏",
      low: "‡§ï‡§Æ",
      veryLow: "‡§¨‡§π‡•Å‡§§ ‡§ï‡§Æ",
      lowModerate: "‡§ï‡§Æ-‡§Æ‡§ß‡•ç‡§Ø‡§Æ",
      moderate: "‡§Æ‡§ß‡•ç‡§Ø‡§Æ"
    },
    chatResponses: {
      greeting: "‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§π‡•Ç‡§Ç‡•§ ‡§Æ‡•à‡§Ç ‡§≤‡§ï‡•ç‡§∑‡§£, ‡§∏‡•ç‡§•‡§ø‡§§‡§ø‡§Ø‡•ã‡§Ç, ‡§¶‡§µ‡§æ‡§ì‡§Ç ‡§î‡§∞ ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡§≤‡§æ‡§π ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§ ‡§Ü‡§™ ‡§ï‡•ç‡§Ø‡§æ ‡§ú‡§æ‡§®‡§®‡§æ ‡§ö‡§æ‡§π‡•á‡§Ç‡§ó‡•á?",
      welcome: "‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à! ‡§∏‡•ç‡§µ‡§∏‡•ç‡§• ‡§∞‡§π‡•á‡§Ç ‡§î‡§∞ ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§∏‡§≤‡§æ‡§π ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§™‡§®‡•á ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§™‡§∞‡§æ‡§Æ‡§∞‡•ç‡§∂ ‡§ï‡§∞‡•á‡§Ç‡•§",
      headache: "‡§∏‡§ø‡§∞‡§¶‡§∞‡•ç‡§¶ ‡§ï‡•á ‡§≤‡§ø‡§è:\n‚Ä¢ ‡§∂‡§æ‡§Ç‡§§, ‡§Ö‡§Ç‡§ß‡•á‡§∞‡•á ‡§ï‡§Æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§Ü‡§∞‡§æ‡§Æ ‡§ï‡§∞‡•á‡§Ç\n‚Ä¢ ‡§™‡§æ‡§®‡•Ä ‡§™‡§ø‡§è‡§Ç\n‚Ä¢ ‡§†‡§Ç‡§°‡§æ ‡§∏‡•á‡§ï ‡§≤‡§ó‡§æ‡§è‡§Ç\n‚Ä¢ ‡§§‡•á‡§ú ‡§∞‡•ã‡§∂‡§®‡•Ä ‡§∏‡•á ‡§¨‡§ö‡•á‡§Ç\n\n‡§ó‡§Ç‡§≠‡•Ä‡§∞ ‡§π‡•ã‡§®‡•á ‡§Ø‡§æ ‡§¨‡•Å‡§ñ‡§æ‡§∞ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§π‡•ã‡§®‡•á ‡§™‡§∞ ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§ï‡•ã ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Ç‡•§",
      fever: "‡§¨‡•Å‡§ñ‡§æ‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è:\n‚Ä¢ ‡§Ü‡§∞‡§æ‡§Æ ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§§‡§∞‡§≤ ‡§™‡§¶‡§æ‡§∞‡•ç‡§• ‡§™‡§ø‡§è‡§Ç\n‚Ä¢ ‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂‡§æ‡§®‡•Å‡§∏‡§æ‡§∞ ‡§™‡•à‡§∞‡§æ‡§∏‡§ø‡§ü‡§æ‡§Æ‡•ã‡§≤ ‡§≤‡•á‡§Ç\n‚Ä¢ ‡§†‡§Ç‡§°‡§æ ‡§∏‡•á‡§ï ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç\n\n103¬∞F ‡§∏‡•á ‡§ä‡§™‡§∞ ‡§Ø‡§æ 3+ ‡§¶‡§ø‡§® ‡§∞‡§π‡§®‡•á ‡§™‡§∞ ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§ï‡•ã ‡§´‡•ã‡§® ‡§ï‡§∞‡•á‡§Ç‡•§",
      cough: "‡§ñ‡§æ‡§Ç‡§∏‡•Ä/‡§∏‡§∞‡•ç‡§¶‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è:\n‚Ä¢ ‡§ó‡§∞‡•ç‡§Æ ‡§§‡§∞‡§≤ ‡§™‡§¶‡§æ‡§∞‡•ç‡§• ‡§™‡§ø‡§è‡§Ç\n‚Ä¢ ‡§π‡•ç‡§Ø‡•Ç‡§Æ‡§ø‡§°‡§ø‡§´‡§æ‡§Ø‡§∞ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç\n‚Ä¢ ‡§Ö‡§ö‡•ç‡§õ‡•á ‡§∏‡•á ‡§Ü‡§∞‡§æ‡§Æ ‡§ï‡§∞‡•á‡§Ç\n‚Ä¢ ‡§™‡§æ‡§®‡•Ä ‡§™‡•Ä‡§§‡•á ‡§∞‡§π‡•á‡§Ç\n\n3+ ‡§∏‡§™‡•ç‡§§‡§æ‡§π ‡§∞‡§π‡§®‡•á ‡§Ø‡§æ ‡§ñ‡•Ç‡§® ‡§Ü‡§®‡•á ‡§™‡§∞ ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§ï‡•ã ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Ç‡•§",
      chest: "üö® ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤! ‡§∏‡•Ä‡§®‡•á ‡§Æ‡•á‡§Ç ‡§¶‡§∞‡•ç‡§¶ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§§‡•Å‡§∞‡§Ç‡§§ 102 ‡§™‡§∞ ‡§ï‡•â‡§≤ ‡§ï‡§∞‡•á‡§Ç‡•§",
      stroke: "üö® ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤! FAST ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£: ‡§ö‡•á‡§π‡§∞‡§æ ‡§ü‡•á‡§¢‡§º‡§æ? ‡§π‡§æ‡§• ‡§ï‡§Æ‡§ú‡•ã‡§∞? ‡§¨‡•ã‡§≤‡§®‡•á ‡§Æ‡•á‡§Ç ‡§ï‡§†‡§ø‡§®‡§æ‡§à? 102 ‡§™‡§∞ ‡§ï‡•â‡§≤ ‡§ï‡§∞‡•á‡§Ç!",
      diabetes: "‡§Æ‡§ß‡•Å‡§Æ‡•á‡§π ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§®:\n‚Ä¢ ‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§¨‡•ç‡§≤‡§° ‡§∂‡•Å‡§ó‡§∞ ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç\n‚Ä¢ ‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂‡§æ‡§®‡•Å‡§∏‡§æ‡§∞ ‡§¶‡§µ‡§æ‡§è‡§Ç ‡§≤‡•á‡§Ç\n‚Ä¢ ‡§∏‡§Ç‡§§‡•Å‡§≤‡§ø‡§§ ‡§Ü‡§π‡§æ‡§∞\n‚Ä¢ ‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§µ‡•ç‡§Ø‡§æ‡§Ø‡§æ‡§Æ\n\n‡§Ö‡§™‡§®‡•á ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§ï‡•á ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Ø‡•ã‡§Ç ‡§ï‡§æ ‡§™‡§æ‡§≤‡§® ‡§ï‡§∞‡•á‡§Ç‡•§",
      bp: "‡§∞‡§ï‡•ç‡§§‡§ö‡§æ‡§™ ‡§∏‡•Å‡§ù‡§æ‡§µ:\n‚Ä¢ ‡§®‡§Æ‡§ï ‡§ï‡§Æ ‡§ï‡§∞‡•á‡§Ç\n‚Ä¢ ‡§∞‡•ã‡§ú ‡§µ‡•ç‡§Ø‡§æ‡§Ø‡§æ‡§Æ ‡§ï‡§∞‡•á‡§Ç\n‚Ä¢ ‡§∏‡•ç‡§µ‡§∏‡•ç‡§• ‡§µ‡§ú‡§® ‡§¨‡§®‡§æ‡§è ‡§∞‡§ñ‡•á‡§Ç\n‚Ä¢ ‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂‡§æ‡§®‡•Å‡§∏‡§æ‡§∞ ‡§¶‡§µ‡§æ‡§è‡§Ç ‡§≤‡•á‡§Ç\n\n‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø: 120/80 ‡§∏‡•á ‡§®‡•Ä‡§ö‡•á",
      default: "‡§Æ‡•à‡§Ç ‡§≤‡§ï‡•ç‡§∑‡§£, ‡§∏‡•ç‡§•‡§ø‡§§‡§ø‡§Ø‡•ã‡§Ç, ‡§¶‡§µ‡§æ‡§ì‡§Ç ‡§î‡§∞ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡§≤‡§æ‡§π ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§™‡•Ç‡§õ‡•á‡§Ç‡•§ ‡§ó‡§Ç‡§≠‡•Ä‡§∞ ‡§ö‡§ø‡§Ç‡§§‡§æ‡§ì‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡§Æ‡•á‡§∂‡§æ ‡§Ö‡§™‡§®‡•á ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§™‡§∞‡§æ‡§Æ‡§∞‡•ç‡§∂ ‡§ï‡§∞‡•á‡§Ç!"
    }
  }
};

export default function SeniorHealthTracker() {
  const [language, setLanguage] = useState('en');
  const [showLanguageMenu, setShowLanguageMenu] = useState(false);
  const [activeTab, setActiveTab] = useState('dashboard');
  const [profile, setProfile] = useState({ name: '', age: 65 });
  const [tempProfile, setTempProfile] = useState({ name: '', age: 65 });
  const [isEditingProfile, setIsEditingProfile] = useState(false);
  const [medicines, setMedicines] = useState([]);
  const [dailyLogs, setDailyLogs] = useState({});
  const [exercisePlan, setExercisePlan] = useState([]);
  const [showAddMedicine, setShowAddMedicine] = useState(false);
  const [newMedicine, setNewMedicine] = useState({ name: '', dosage: '', times: ['Morning'], frequency: 'Daily', weeklyDays: [1] });
  const [tutorialStep, setTutorialStep] = useState(0);
  const [showTutorial, setShowTutorial] = useState(true);
  const [tutorialCompleted, setTutorialCompleted] = useState(false);
  const [darkMode, setDarkMode] = useState(false);
  const [userLocation, setUserLocation] = useState(null);
  const [nearbyHospitals, setNearbyHospitals] = useState([]);
  const [loadingLocation, setLoadingLocation] = useState(false);
  const [locationError, setLocationError] = useState('');
  const [chatMessages, setChatMessages] = useState([
    { role: 'bot', text: translations['en'].chatbotGreeting }
  ]);
  const [chatInput, setChatInput] = useState('');
  const [sidebarOpen, setSidebarOpen] = useState(true);

  const t = translations[language];

  useEffect(() => {
    setChatMessages([{ role: 'bot', text: t.chatbotGreeting }]);
  }, [language]);

  useEffect(() => {
    let plan = [];
    const age = profile.age;
    if (age >= 12 && age < 60) {
      plan = [
        { time: '0-5 min', activity: 'Warm-up: Gentle walking', intensity: 'Low' },
        { time: '5-15 min', activity: 'Brisk walking or jogging', intensity: 'Moderate' },
        { time: '15-25 min', activity: 'Strength: Squats, push-ups', intensity: 'Moderate' },
        { time: '25-35 min', activity: 'Balance exercises', intensity: 'Low' },
        { time: '35-40 min', activity: 'Stretching', intensity: 'Low' },
        { time: '40-45 min', activity: 'Cool down', intensity: 'Low' }
      ];
    } else if (age >= 60 && age < 75) {
      plan = [
        { time: '0-5 min', activity: 'Warm-up: Seated marching', intensity: 'Low' },
        { time: '5-15 min', activity: 'Gentle walking', intensity: 'Low-Moderate' },
        { time: '15-25 min', activity: 'Chair exercises', intensity: 'Low' },
        { time: '25-33 min', activity: 'Balance with support', intensity: 'Low' },
        { time: '33-40 min', activity: 'Stretching', intensity: 'Low' },
        { time: '40-45 min', activity: 'Breathing exercises', intensity: 'Low' }
      ];
    } else if (age >= 75) {
      plan = [
        { time: '0-5 min', activity: 'Warm-up: Seated movements', intensity: 'Very Low' },
        { time: '5-15 min', activity: 'Seated walking', intensity: 'Low' },
        { time: '15-25 min', activity: 'Chair exercises', intensity: 'Very Low' },
        { time: '25-33 min', activity: 'Hand exercises', intensity: 'Very Low' },
        { time: '33-40 min', activity: 'Gentle stretching', intensity: 'Very Low' },
        { time: '40-45 min', activity: 'Deep breathing', intensity: 'Very Low' }
      ];
    }
    setExercisePlan(plan);
  }, [profile.age]);

  const getMedicinesToday = () => {
    const currentDay = new Date().getDay();
    return medicines.filter(m => {
      if (m.frequency === 'Daily') return true;
      if (m.frequency === 'Weekly' && m.weeklyDays) return m.weeklyDays.includes(currentDay);
      return false;
    });
  };

  const getTodayStats = () => {
    const today = new Date().toDateString();
    const medicinesToday = getMedicinesToday();
    const totalDoses = medicinesToday.reduce((acc, m) => acc + m.times.length, 0);
    const takenDoses = Object.keys(dailyLogs).filter(k => k.startsWith(`${today}-med-`) && dailyLogs[k]).length;
    const totalExercises = exercisePlan.length;
    const completedExercises = Object.keys(dailyLogs).filter(k => k.startsWith(`${today}-exercise-`) && dailyLogs[k]).length;
    const allExercisesComplete = totalExercises > 0 && completedExercises === totalExercises;
    return { totalDoses, takenDoses, totalExercises, completedExercises, allExercisesComplete };
  };

  const stats = getTodayStats();
  const today = new Date().toDateString();

  const tutorialSteps = [
    { title: t.welcome, desc: t.welcomeDesc },
    { title: t.enterInfo, desc: t.enterInfoDesc },
    { title: t.dashboard, desc: t.dashboardDesc },
    { title: t.addMedicines, desc: t.addMedicinesDesc },
    { title: t.checkOff, desc: t.checkOffDesc },
    { title: t.exercisePlan, desc: t.exercisePlanDesc },
    { title: t.trackProgress, desc: t.trackProgressDesc },
    { title: t.allSet, desc: t.allSetDesc }
  ];

  const getUserLocation = () => {
    setLoadingLocation(true);
    setLocationError('');
    setNearbyHospitals([]);
    
    if (!navigator.geolocation) {
      setLocationError('Your browser does not support location services.');
      setLoadingLocation(false);
      return;
    }

    navigator.geolocation.getCurrentPosition(
      (position) => {
        const { latitude, longitude } = position.coords;
        setUserLocation({ lat: latitude, lng: longitude });
        findNearbyHospitals(latitude, longitude);
        setLoadingLocation(false);
      },
      (error) => {
        setLoadingLocation(false);
        let errorMsg = 'Could not get your location. Please enable location services.';
        if (error.code === 1) errorMsg = 'Location permission denied. Please enable location access.';
        setLocationError(errorMsg);
      },
      { enableHighAccuracy: true, timeout: 15000, maximumAge: 0 }
    );
  };

  const findNearbyHospitals = (lat, lng) => {
    const generateHospital = (name, latOffset, lngOffset, hasEmergency) => {
      const hospitalLat = lat + latOffset;
      const hospitalLng = lng + lngOffset;
      const R = 6371;
      const dLat = (latOffset) * Math.PI / 180;
      const dLon = (lngOffset) * Math.PI / 180;
      const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
                Math.cos(lat * Math.PI / 180) * Math.cos(hospitalLat * Math.PI / 180) *
                Math.sin(dLon/2) * Math.sin(dLon/2);
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
      const distance = R * c;
      
      return {
        name,
        distance: `${distance.toFixed(1)} km`,
        distanceValue: distance,
        address: `${Math.floor(Math.random() * 900 + 100)} ${['Main St', 'Oak Ave', 'Pine Rd'][Math.floor(Math.random() * 3)]}`,
        phone: `(555) ${Math.floor(Math.random() * 900 + 100)}-${Math.floor(Math.random() * 9000 + 1000)}`,
        emergency: hasEmergency,
        lat: hospitalLat,
        lng: hospitalLng
      };
    };

    const hospitals = [
      generateHospital('City General Hospital', 0.009, 0.009, true),
      generateHospital('St. Mary Medical Center', 0.015, -0.012, true),
      generateHospital('Community Health Clinic', -0.018, 0.014, false),
      generateHospital('Memorial Hospital', 0.025, 0.020, true),
      generateHospital('Regional Medical Center', -0.030, -0.025, true)
    ];
    
    hospitals.sort((a, b) => a.distanceValue - b.distanceValue);
    setNearbyHospitals(hospitals.slice(0, 5));
  };

  const openInMaps = (hospital) => {
    if (userLocation) {
      const url = `https://www.google.com/maps/dir/?api=1&origin=${userLocation.lat},${userLocation.lng}&destination=${hospital.lat},${hospital.lng}`;
      window.open(url, '_blank');
    }
  };

  const getMedicalResponse = (question) => {
    const q = question.toLowerCase();
    if (q.match(/^(hi|hello|hey|good)/)) return t.chatbotGreeting;
    if (q.match(/thank/)) return 'You\'re welcome! Stay healthy and consult your doctor for personalized advice.';
    if (q.match(/headache|migraine/)) return 'For headaches:\n‚Ä¢ Rest in a quiet, dark room\n‚Ä¢ Stay hydrated\n‚Ä¢ Apply cold compress\n‚Ä¢ Avoid bright lights\n\nSee a doctor if severe or with fever.';
    if (q.match(/fever/)) return 'For fever:\n‚Ä¢ Rest and drink fluids\n‚Ä¢ Take acetaminophen as directed\n‚Ä¢ Use cool compress\n\nCall doctor if above 103¬∞F or lasts 3+ days.';
    if (q.match(/cough|cold/)) return 'For cough/cold:\n‚Ä¢ Drink warm liquids\n‚Ä¢ Use humidifier\n‚Ä¢ Rest well\n‚Ä¢ Stay hydrated\n\nSee doctor if lasts 3+ weeks or coughing blood.';
    if (q.match(/chest pain|heart/)) return 'üö® EMERGENCY! Call emergency services immediately for chest pain.';
    if (q.match(/stroke/)) return 'üö® EMERGENCY! FAST test: Face drooping? Arm weakness? Speech difficulty? Call emergency!';
    if (q.match(/diabetes|sugar/)) return 'Diabetes management:\n‚Ä¢ Monitor blood sugar regularly\n‚Ä¢ Take medications as prescribed\n‚Ä¢ Balanced diet\n‚Ä¢ Regular exercise\n\nFollow your doctor\'s specific targets.';
    if (q.match(/blood pressure|bp/)) return 'Blood pressure tips:\n‚Ä¢ Reduce salt\n‚Ä¢ Exercise daily\n‚Ä¢ Maintain healthy weight\n‚Ä¢ Take medications as prescribed\n\nNormal: Below 120/80';
    return 'I can help with symptoms, conditions, medications, and health advice. Please ask your question. For serious concerns, always consult your doctor!';
  };

  const sendMessage = () => {
    if (!chatInput.trim()) return;
    const userMsg = { role: 'user', text: chatInput };
    const botMsg = { role: 'bot', text: getMedicalResponse(chatInput) };
    setChatMessages([...chatMessages, userMsg, botMsg]);
    setChatInput('');
    setTimeout(() => {
      const container = document.getElementById('chat-container');
      if (container) container.scrollTop = container.scrollHeight;
    }, 100);
  };

  return (
    <div className={`min-h-screen ${darkMode ? 'bg-gray-900' : 'bg-gray-50'}`}>
      {showTutorial && (
        <div className="fixed inset-0 bg-black bg-opacity-80 z-50 flex items-center justify-center p-6">
          <div className={`rounded-lg shadow-2xl w-full max-w-lg p-8 ${darkMode ? 'bg-gray-800' : 'bg-white'}`}>
            <div className="mb-6">
              <div className="flex items-center justify-between mb-4">
                <span className="text-lg font-semibold text-blue-600">Step {tutorialStep + 1}/8</span>
                <button onClick={() => { setShowTutorial(false); setTutorialCompleted(true); }} className="text-sm text-gray-400 hover:text-gray-600">{t.skip}</button>
              </div>
              <div className="w-full rounded-full h-3 bg-gray-200">
                <div className="bg-blue-600 h-3 rounded-full" style={{ width: `${((tutorialStep + 1) / 8) * 100}%` }}></div>
              </div>
            </div>
            <h2 className={`text-4xl font-bold mb-4 ${darkMode ? 'text-white' : 'text-gray-800'}`}>{tutorialSteps[tutorialStep].title}</h2>
            <p className={`text-xl mb-8 ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>{tutorialSteps[tutorialStep].desc}</p>
            <div className="flex gap-4">
              {tutorialStep > 0 && (
                <button onClick={() => setTutorialStep(tutorialStep - 1)} className={`flex-1 px-6 py-3 rounded-lg text-lg font-semibold ${darkMode ? 'bg-gray-700 text-gray-200' : 'bg-gray-200 text-gray-700'}`}>{t.back}</button>
              )}
              <button onClick={() => tutorialStep < 7 ? setTutorialStep(tutorialStep + 1) : (setShowTutorial(false), setTutorialCompleted(true))} className="flex-1 bg-blue-600 text-white px-6 py-3 rounded-lg text-lg font-semibold">
                {tutorialStep === 7 ? t.getStarted : t.next}
              </button>
            </div>
          </div>
        </div>
      )}

      <div className="flex h-screen overflow-hidden">
        <div className={`${sidebarOpen ? 'w-64' : 'w-20'} ${darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'} border-r flex flex-col`} style={{ transition: 'width 0.3s' }}>
          <div className={`p-4 border-b ${darkMode ? 'border-gray-700 bg-blue-600' : 'border-gray-200 bg-blue-600'} text-white`}>
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <Heart className="w-8 h-8" />
                {sidebarOpen && <div><h1 className="text-xl font-bold">{t.appTitle}</h1><p className="text-xs opacity-90">{profile.name || 'User'}</p></div>}
              </div>
              <button onClick={() => setSidebarOpen(!sidebarOpen)} className="p-2 rounded-lg hover:bg-white hover:bg-opacity-20"><Menu className="w-5 h-5" /></button>
            </div>
          </div>

          {profile.name && sidebarOpen && (
            <div className={`p-4 border-b ${darkMode ? 'border-gray-700 bg-gray-900' : 'border-gray-200 bg-blue-50'}`}>
              <div className="flex items-center gap-3">
                <div className="w-12 h-12 bg-blue-600 rounded-full flex items-center justify-center text-white text-lg font-bold">{profile.name.charAt(0).toUpperCase()}</div>
                <div className="flex-1 min-w-0">
                  <p className={`text-sm font-bold truncate ${darkMode ? 'text-white' : 'text-gray-800'}`}>{profile.name}</p>
                  <p className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>{profile.age} years</p>
                </div>
              </div>
            </div>
          )}

          <nav className="flex-1 p-4 space-y-2 overflow-y-auto">
            {[
              { id: 'dashboard', label: t.dashboard, icon: Activity },
              { id: 'medicines', label: t.medicines, icon: Pill },
              { id: 'chatbot', label: t.healthAI, icon: MessageCircle },
              { id: 'hospitals', label: t.hospitals, icon: MapPin },
              { id: 'profile', label: t.profile, icon: User }
            ].map(tab => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`w-full flex items-center gap-3 px-4 py-3 rounded-lg ${
                  activeTab === tab.id
                    ? (darkMode ? 'bg-blue-600 text-white' : 'bg-blue-100 text-blue-600')
                    : (darkMode ? 'text-gray-400 hover:bg-gray-700' : 'text-gray-600 hover:bg-gray-100')
                } ${sidebarOpen ? '' : 'justify-center'}`}
              >
                <tab.icon className="w-5 h-5" />
                {sidebarOpen && <span className="text-sm font-semibold">{tab.label}</span>}
              </button>
            ))}
          </nav>

          {sidebarOpen && (
            <div className="p-4 border-t space-y-2">
              <div className="relative">
                <button
                  onClick={() => setShowLanguageMenu(!showLanguageMenu)}
                  className={`w-full px-4 py-2 rounded-lg text-sm font-semibold flex items-center justify-between ${darkMode ? 'bg-gray-700 text-gray-200' : 'bg-gray-200 text-gray-700'}`}
                >
                  <div className="flex items-center gap-2">
                    <Globe className="w-4 h-4" />
                    <span>{translations[language].name}</span>
                  </div>
                </button>
                {showLanguageMenu && (
                  <div className={`absolute bottom-full left-0 right-0 mb-2 rounded-lg shadow-lg overflow-hidden ${darkMode ? 'bg-gray-700' : 'bg-white'}`}>
                    {Object.keys(translations).map(lang => (
                      <button
                        key={lang}
                        onClick={() => { setLanguage(lang); setShowLanguageMenu(false); }}
                        className={`w-full px-4 py-2 text-left text-sm ${darkMode ? 'hover:bg-gray-600' : 'hover:bg-blue-100'} ${language === lang ? 'bg-blue-600 text-white' : (darkMode ? 'text-gray-200' : 'text-gray-700')}`}
                      >
                        {translations[lang].name}
                      </button>
                    ))}
                  </div>
                )}
              </div>
              <button onClick={() => { setTutorialStep(0); setShowTutorial(true); }} className={`w-full px-4 py-2 rounded-lg text-sm font-semibold ${darkMode ? 'bg-gray-700 text-gray-200' : 'bg-gray-200 text-gray-700'}`}>{t.helpTutorial}</button>
            </div>
          )}
        </div>

        <div className="flex-1 overflow-y-auto">
          <div className="max-w-7xl mx-auto p-6">
            {!profile.name && tutorialCompleted && (
              <div className={`rounded-lg shadow-lg p-6 border-2 mb-6 ${darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'}`}>
                <h2 className={`text-2xl font-bold mb-4 ${darkMode ? 'text-white' : 'text-gray-800'}`}>{t.welcome} {t.saveProfile}</h2>
                <div className="grid md:grid-cols-2 gap-4">
                  <div>
                    <label className={`block text-sm font-semibold mb-2 ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>{t.yourName}</label>
                    <input type="text" placeholder={t.enterName} className={`w-full text-base p-3 border-2 rounded-lg ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-300'}`} value={tempProfile.name} onChange={(e) => setTempProfile({...tempProfile, name: e.target.value})} />
                  </div>
                  <div>
                    <label className={`block text-sm font-semibold mb-2 ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>{t.yourAge}</label>
                    <input type="number" placeholder={t.enterAge} className={`w-full text-base p-3 border-2 rounded-lg ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-300'}`} value={tempProfile.age} onChange={(e) => setTempProfile({...tempProfile, age: parseInt(e.target.value) || 65})} />
                  </div>
                </div>
                <button onClick={() => { setProfile(tempProfile); setTutorialCompleted(true); }} className="mt-4 bg-green-600 text-white px-6 py-3 rounded-lg font-semibold flex items-center gap-2"><CheckCircle className="w-5 h-5" /> {t.saveProfile}</button>
              </div>
            )}

            {activeTab === 'dashboard' && (
              <div className="space-y-6">
                <div>
                  <h2 className={`text-3xl font-bold mb-2 ${darkMode ? 'text-white' : 'text-gray-800'}`}>{t.dashboard}</h2>
                  <p className={darkMode ? 'text-gray-400' : 'text-gray-600'}>{t.welcomeBack}</p>
                </div>

                <div className="grid md:grid-cols-3 gap-4">
                  <div className="bg-blue-600 text-white rounded-lg shadow-lg p-6">
                    <div className="flex items-center gap-3 mb-3">
                      <Pill className="w-8 h-8" />
                      <h3 className="text-xl font-bold">{t.medicines}</h3>
                    </div>
                    <div className="text-5xl font-bold mb-2">{stats.takenDoses}/{stats.totalDoses}</div>
                    <p className="text-sm opacity-90">{t.dosesTaken}</p>
                  </div>

                  <div className="bg-green-600 text-white rounded-lg shadow-lg p-6">
                    <div className="flex items-center gap-3 mb-3">
                      <Activity className="w-8 h-8" />
                      <h3 className="text-xl font-bold">{t.exercise}</h3>
                    </div>
                    <div className="text-5xl font-bold mb-2">{stats.allExercisesComplete ? '‚úì' : `${stats.completedExercises}/${stats.totalExercises}`}</div>
                    <p className="text-sm opacity-90">{stats.allExercisesComplete ? t.completed : t.activitiesDone}</p>
                  </div>

                  <div className="bg-purple-600 text-white rounded-lg shadow-lg p-6">
                    <div className="flex items-center gap-3 mb-3">
                      <Calendar className="w-8 h-8" />
                      <h3 className="text-xl font-bold">{t.today}</h3>
                    </div>
                    <p className="text-lg font-semibold">{new Date().toLocaleDateString(language === 'en' ? 'en-US' : language === 'hi' ? 'hi-IN' : language === 'bn' ? 'bn-BD' : 'en-US', { weekday: 'long', month: 'long', day: 'numeric' })}</p>
                  </div>
                </div>

                <div className="grid lg:grid-cols-2 gap-6">
                  <div className={`rounded-lg shadow-lg p-6 border-2 ${darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'}`}>
                    <h3 className={`text-2xl font-bold mb-4 flex items-center gap-2 ${darkMode ? 'text-white' : 'text-gray-800'}`}>
                      <Pill className="w-6 h-6 text-blue-600" />
                      {t.todaysMedicines}
                    </h3>
                    {getMedicinesToday().length === 0 ? (
                      <div className="text-center py-8">
                        <Pill className={`w-16 h-16 mx-auto mb-3 ${darkMode ? 'text-gray-600' : 'text-gray-400'}`} />
                        <p className={`text-lg ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>{t.noMedicinesScheduled}</p>
                        <button onClick={() => setActiveTab('medicines')} className="mt-3 text-blue-600 hover:underline font-semibold">{t.addMedicinesBtn}</button>
                      </div>
                    ) : (
                      <div className="space-y-4">
                        {getMedicinesToday().map(med => (
                          <div key={med.id} className={`rounded-lg p-4 ${darkMode ? 'bg-gray-700' : 'bg-gray-50'}`}>
                            <p className={`text-lg font-semibold mb-2 ${darkMode ? 'text-white' : 'text-gray-800'}`}>{med.name}</p>
                            <p className={`text-sm mb-3 ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>{med.dosage}</p>
                            <div className="flex gap-2 flex-wrap">
                              {med.times.map(time => {
                                const key = `${today}-med-${med.id}-${time}`;
                                const taken = dailyLogs[key];
                                return (
                                  <button
                                    key={time}
                                    onClick={() => setDailyLogs({...dailyLogs, [key]: !taken})}
                                    className={`px-4 py-2 text-sm font-semibold rounded-lg ${
                                      taken
                                        ? 'bg-green-500 text-white'
                                        : (darkMode ? 'bg-gray-600 border-2 border-gray-500 text-gray-200' : 'bg-white border-2 border-gray-300')
                                    }`}
                                  >
                                    {taken ? '‚úì ' : ''}{time}
                                  </button>
                                );
                              })}
                            </div>
                          </div>
                        ))}
                      </div>
                    )}
                  </div>

                  <div className={`rounded-lg shadow-lg p-6 border-2 ${darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'}`}>
                    <h3 className={`text-2xl font-bold mb-4 flex items-center gap-2 ${darkMode ? 'text-white' : 'text-gray-800'}`}>
                      <Activity className="w-6 h-6 text-green-600" />
                      {t.morningExercise}
                    </h3>
                    {profile.age < 12 ? (
                      <div className="bg-yellow-50 border-2 border-yellow-300 rounded-lg p-6 text-center">
                        <AlertCircle className="w-16 h-16 text-yellow-600 mx-auto mb-3" />
                        <p className="text-lg font-semibold text-yellow-800">{t.ageRestriction}</p>
                        <p className="text-sm text-yellow-700 mt-2">{t.availableFor12Plus}</p>
                      </div>
                    ) : (
                      <>
                        <div className="bg-yellow-50 border-2 border-yellow-200 rounded-lg p-3 mb-4">
                          <p className="text-sm font-semibold text-yellow-800">{t.consultDoctor}</p>
                        </div>
                        <div className="space-y-3" style={{ maxHeight: '384px', overflowY: 'auto' }}>
                          {exercisePlan.map((ex, idx) => {
                            const key = `${today}-exercise-${idx}`;
                            const done = dailyLogs[key];
                            return (
                              <button
                                key={idx}
                                onClick={() => {
                                  const newLogs = {...dailyLogs, [key]: !done};
                                  setDailyLogs(newLogs);
                                }}
                                className={`w-full text-left rounded-lg p-4 border-2 ${
                                  done
                                    ? 'bg-green-50 border-green-300'
                                    : (darkMode ? 'bg-gray-700 border-gray-600' : 'bg-gray-50 border-gray-200')
                                }`}
                              >
                                <div className="flex items-start gap-3">
                                  <div className={`w-6 h-6 rounded-full border-2 flex items-center justify-center ${
                                    done ? 'bg-green-500 border-green-500' : (darkMode ? 'bg-gray-800 border-gray-500' : 'bg-white border-gray-300')
                                  }`}>
                                    {done && <CheckCircle className="w-5 h-5 text-white" />}
                                  </div>
                                  <div className="flex-1">
                                    <div className="flex gap-2 mb-1 flex-wrap">
                                      <span className="bg-blue-100 text-blue-700 px-2 py-1 rounded text-xs font-bold">{ex.time}</span>
                                      <span className={`px-2 py-1 rounded text-xs font-semibold ${
                                        ex.intensity === 'Very Low' ? 'bg-green-100 text-green-700' :
                                        ex.intensity.includes('Low') ? 'bg-blue-100 text-blue-700' :
                                        'bg-orange-100 text-orange-700'
                                      }`}>{ex.intensity}</span>
                                    </div>
                                    <p className={`text-sm ${darkMode && !done ? 'text-gray-300' : ''}`}>{ex.activity}</p>
                                  </div>
                                </div>
                              </button>
                            );
                          })}
                        </div>
                        <button
                          onClick={() => {
                            const newLogs = {...dailyLogs};
                            const allDone = !stats.allExercisesComplete;
                            exercisePlan.forEach((_, idx) => { newLogs[`${today}-exercise-${idx}`] = allDone; });
                            setDailyLogs(newLogs);
                          }}
                          className={`w-full mt-4 py-3 text-base font-bold rounded-lg ${
                            stats.allExercisesComplete ? 'bg-green-500 text-white' : 'bg-blue-500 text-white'
                          }`}
                        >
                          {stats.allExercisesComplete ? t.allDoneToday : t.markAllDone}
                        </button>
                      </>
                    )}
                  </div>
                </div>
              </div>
            )}

            {activeTab === 'medicines' && (
              <div className="space-y-6">
                <div className="flex items-center justify-between">
                  <div>
                    <h2 className={`text-3xl font-bold mb-2 ${darkMode ? 'text-white' : 'text-gray-800'}`}>{t.myMedicines}</h2>
                    <p className={darkMode ? 'text-gray-400' : 'text-gray-600'}>{t.manageMedication}</p>
                  </div>
                  <button onClick={() => setShowAddMedicine(!showAddMedicine)} className="bg-blue-600 text-white px-6 py-3 rounded-lg flex items-center gap-2 font-semibold">
                    <Plus className="w-5 h-5" />{t.addMedicine}
                  </button>
                </div>

                {showAddMedicine && (
                  <div className={`rounded-lg p-6 ${darkMode ? 'bg-gray-700' : 'bg-blue-50'}`}>
                    <h3 className={`text-xl font-bold mb-4 ${darkMode ? 'text-white' : 'text-gray-800'}`}>{t.addNewMedicine}</h3>
                    <div className="grid md:grid-cols-2 gap-4">
                      <div>
                        <label className={`block text-sm font-semibold mb-2 ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>{t.medicineName}</label>
                        <input type="text" placeholder={t.egAspirin} className={`w-full p-3 border-2 rounded-lg ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-300'}`} value={newMedicine.name} onChange={(e) => setNewMedicine({...newMedicine, name: e.target.value})} />
                      </div>
                      <div>
                        <label className={`block text-sm font-semibold mb-2 ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>{t.dosage}</label>
                        <input type="text" placeholder={t.eg100mg} className={`w-full p-3 border-2 rounded-lg ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-300'}`} value={newMedicine.dosage} onChange={(e) => setNewMedicine({...newMedicine, dosage: e.target.value})} />
                      </div>
                    </div>
                    <div className="flex gap-3 mt-4">
                      <button onClick={() => {
                        if (newMedicine.name && newMedicine.dosage) {
                          setMedicines([...medicines, {...newMedicine, id: Date.now()}]);
                          setNewMedicine({ name: '', dosage: '', times: ['Morning'], frequency: 'Daily', weeklyDays: [1] });
                          setShowAddMedicine(false);
                        }
                      }} className="bg-green-600 text-white px-6 py-3 rounded-lg font-semibold">{t.saveMedicine}</button>
                      <button onClick={() => setShowAddMedicine(false)} className={`px-6 py-3 rounded-lg font-semibold ${darkMode ? 'bg-gray-600 text-white' : 'bg-gray-300'}`}>{t.cancel}</button>
                    </div>
                  </div>
                )}

                {medicines.length === 0 ? (
                  <div className={`rounded-lg shadow-lg p-12 border-2 ${darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'} text-center`}>
                    <Pill className={`w-20 h-20 mx-auto mb-4 ${darkMode ? 'text-gray-600' : 'text-gray-400'}`} />
                    <p className={`text-xl ${darkMode ? 'text-white' : 'text-gray-800'}`}>{t.noMedicinesAdded}</p>
                    <p className={`text-sm mt-2 ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>{t.clickToAdd}</p>
                  </div>
                ) : (
                  <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-4">
                    {medicines.map(m => (
                      <div key={m.id} className={`rounded-lg p-5 border-2 ${darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'}`}>
                        <div className="flex justify-between items-start mb-3">
                          <div className="flex-1">
                            <p className={`text-lg font-bold ${darkMode ? 'text-white' : 'text-gray-800'}`}>{m.name}</p>
                            <p className={`text-sm ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>{m.dosage}</p>
                          </div>
                          <button onClick={() => setMedicines(medicines.filter(med => med.id !== m.id))} className="text-red-500 p-2">
                            <X className="w-5 h-5" />
                          </button>
                        </div>
                        <div className="flex gap-2 flex-wrap">
                          {m.times.map(time => (
                            <span key={time} className="bg-blue-100 text-blue-700 px-3 py-1 rounded-lg text-xs font-semibold">{time}</span>
                          ))}
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            )}

            {activeTab === 'chatbot' && (
              <div style={{ height: 'calc(100vh - 8rem)' }}>
                <div className={`rounded-lg shadow-lg border-2 ${darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'} flex flex-col h-full`}>
                  <div className={`p-6 border-b-2 ${darkMode ? 'border-gray-700' : 'border-gray-200'}`}>
                    <h2 className={`text-3xl font-bold flex items-center gap-3 ${darkMode ? 'text-white' : 'text-gray-800'}`}>
                      <MessageCircle className="w-8 h-8 text-blue-600" />
                      {t.healthAI}
                    </h2>
                    <p className={`text-sm mt-2 ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>{t.askAboutSymptoms}</p>
                  </div>

                  <div id="chat-container" className={`flex-1 overflow-y-auto p-6 space-y-4 ${darkMode ? 'bg-gray-900' : 'bg-gray-50'}`}>
                    {chatMessages.map((msg, idx) => (
                      <div key={idx} className={`flex ${msg.role === 'user' ? 'justify-end' : 'justify-start'}`}>
                        <div className={`max-w-2xl rounded-lg p-5 ${
                          msg.role === 'user'
                            ? 'bg-blue-600 text-white'
                            : (darkMode ? 'bg-gray-800 text-gray-100 border-2 border-gray-700' : 'bg-white text-gray-800 border-2 border-gray-200')
                        }`}>
                          {msg.role === 'bot' && (
                            <div className="flex items-center gap-2 mb-3">
                              <Heart className="w-5 h-5 text-red-500" />
                              <span className="font-semibold text-blue-600">{t.healthAI}</span>
                            </div>
                          )}
                          <p className="text-base leading-relaxed whitespace-pre-line">{msg.text}</p>
                        </div>
                      </div>
                    ))}
                  </div>

                  <div className={`p-6 border-t-2 ${darkMode ? 'border-gray-700 bg-gray-900' : 'border-gray-200 bg-white'}`}>
                    <div className="flex gap-3 mb-3">
                      <input
                        type="text"
                        placeholder={t.askQuestion}
                        className={`flex-1 p-4 border-2 rounded-lg text-base ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-300'}`}
                        value={chatInput}
                        onChange={(e) => setChatInput(e.target.value)}
                        onKeyPress={(e) => e.key === 'Enter' && sendMessage()}
                      />
                      <button onClick={sendMessage} className="bg-blue-600 text-white px-8 rounded-lg font-semibold">
                        <Send className="w-5 h-5" />
                      </button>
                    </div>
                    <p className="text-xs text-center text-red-600 font-semibold">{t.emergencyWarning}</p>
                  </div>
                </div>
              </div>
            )}

            {activeTab === 'hospitals' && (
              <div className="space-y-6">
                <div>
                  <h2 className={`text-3xl font-bold mb-2 ${darkMode ? 'text-white' : 'text-gray-800'}`}>{t.nearbyHospitals}</h2>
                  <p className={darkMode ? 'text-gray-400' : 'text-gray-600'}>{t.findEmergencyCare}</p>
                </div>

                <div className={`rounded-lg shadow-lg p-6 border-2 ${darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'}`}>
                  {!userLocation ? (
                    <div className="text-center py-12">
                      <Navigation className={`w-20 h-20 mx-auto mb-6 ${darkMode ? 'text-gray-600' : 'text-gray-400'}`} />
                      <h3 className={`text-2xl font-bold mb-3 ${darkMode ? 'text-white' : 'text-gray-800'}`}>{t.enableLocation}</h3>
                      <p className={`text-base mb-6 ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>{t.allowLocation}</p>
                      <button
                        onClick={getUserLocation}
                        disabled={loadingLocation}
                        className={`bg-blue-600 text-white px-8 py-4 rounded-lg text-lg font-semibold flex items-center gap-3 mx-auto ${
                          loadingLocation ? 'opacity-50' : ''
                        }`}
                      >
                        <MapPin className="w-6 h-6" />
                        {loadingLocation ? t.gettingLocation : t.getMyLocation}
                      </button>
                      {locationError && (
                        <div className="mt-6 p-4 bg-red-50 border-2 border-red-200 rounded-lg max-w-md mx-auto">
                          <p className="text-red-700 text-sm">{locationError}</p>
                        </div>
                      )}
                    </div>
                  ) : (
                    <>
                      <div className="mb-6 p-4 bg-green-50 border-2 border-green-200 rounded-lg flex items-center justify-between">
                        <p className="text-green-700 font-semibold">{t.locationFound}</p>
                        <button onClick={getUserLocation} className={`px-4 py-2 rounded-lg text-sm font-semibold flex items-center gap-2 ${darkMode ? 'bg-gray-700 text-white' : 'bg-gray-200 text-gray-700'}`}>
                          <MapPin className="w-4 h-4" />{t.refresh}
                        </button>
                      </div>

                      <div className="grid md:grid-cols-2 gap-4">
                        {nearbyHospitals.map((hospital, idx) => (
                          <div key={idx} className={`rounded-lg p-5 border-2 ${darkMode ? 'bg-gray-700 border-gray-600' : 'bg-white border-gray-200'}`}>
                            <div className="flex items-start justify-between mb-3">
                              <div className="flex-1">
                                <h3 className={`text-lg font-bold mb-2 ${darkMode ? 'text-white' : 'text-gray-800'}`}>{hospital.name}</h3>
                                {hospital.emergency && (
                                  <span className="inline-block bg-red-100 text-red-700 px-3 py-1 rounded-lg text-xs font-semibold">
                                    {t.emergencyServices}
                                  </span>
                                )}
                              </div>
                              <div className="bg-blue-100 text-blue-700 px-3 py-1 rounded-lg text-sm font-bold ml-3">
                                {hospital.distance}
                              </div>
                            </div>

                            <div className="space-y-2 mb-4">
                              <p className={`text-sm flex items-start gap-2 ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>
                                <MapPin className="w-4 h-4 mt-0.5" />
                                {hospital.address}
                              </p>
                              <p className={`text-sm flex items-center gap-2 ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>
                                üìû {hospital.phone}
                              </p>
                            </div>

                            <div className="flex gap-2">
                              <button onClick={() => openInMaps(hospital)} className="flex-1 bg-blue-600 text-white px-4 py-3 rounded-lg text-sm font-semibold flex items-center justify-center gap-2">
                                <Navigation className="w-4 h-4" />{t.directions}
                              </button>
                              <button onClick={() => window.location.href = `tel:${hospital.phone}`} className="flex-1 bg-green-600 text-white px-4 py-3 rounded-lg text-sm font-semibold">
                                {t.callNow}
                              </button>
                            </div>
                          </div>
                        ))}
                      </div>
                    </>
                  )}
                </div>

                <div className={`rounded-lg shadow-lg p-6 border-2 border-red-200 ${darkMode ? 'bg-red-900' : 'bg-red-50'}`}>
                  <h3 className={`text-xl font-bold mb-4 flex items-center gap-2 ${darkMode ? 'text-red-200' : 'text-red-800'}`}>
                    <AlertCircle className="w-6 h-6" />{t.emergencyInfo}
                  </h3>
                  <button onClick={() => window.location.href = 'tel:911'} className="w-full bg-red-600 text-white px-6 py-4 rounded-lg text-lg font-bold mb-3">
                    {t.call911}
                  </button>
                  <p className={`text-sm ${darkMode ? 'text-red-200' : 'text-red-700'}`}>
                    {t.call911For}
                  </p>
                </div>
              </div>
            )}

            {activeTab === 'profile' && (
              <div className="space-y-6">
                <div>
                  <h2 className={`text-3xl font-bold mb-2 ${darkMode ? 'text-white' : 'text-gray-800'}`}>{t.profileSettings}</h2>
                  <p className={darkMode ? 'text-gray-400' : 'text-gray-600'}>{t.manageInfo}</p>
                </div>

                <div className={`rounded-lg shadow-lg p-8 border-2 ${darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'}`}>
                  <div className="flex flex-col md:flex-row items-center gap-6 mb-8">
                    <div className="w-32 h-32 bg-blue-600 rounded-full flex items-center justify-center text-white text-5xl font-bold">
                      {profile.name ? profile.name.charAt(0).toUpperCase() : 'U'}
                    </div>
                    <div className="text-center md:text-left flex-1">
                      <h2 className={`text-3xl font-bold ${darkMode ? 'text-white' : 'text-gray-800'}`}>{profile.name || 'User'}</h2>
                      <p className={`text-lg ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>{profile.age} {language === 'en' ? 'years old' : language === 'hi' ? '‡§µ‡§∞‡•ç‡§∑' : language === 'bn' ? '‡¶¨‡¶õ‡¶∞ ‡¶¨‡¶Ø‡¶º‡¶∏‡ßÄ' : language === 'as' ? '‡¶¨‡¶õ‡ß∞' : '‡¶ö‡¶π‡¶ø'}</p>
                    </div>
                  </div>

                  {isEditingProfile ? (
                    <div className="space-y-4">
                      <div>
                        <label className={`block text-sm font-semibold mb-2 ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>{t.name}</label>
                        <input type="text" placeholder={t.yourName} className={`w-full p-3 border-2 rounded-lg ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-300'}`} value={tempProfile.name} onChange={(e) => setTempProfile({...tempProfile, name: e.target.value})} />
                      </div>
                      <div>
                        <label className={`block text-sm font-semibold mb-2 ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>{t.age}</label>
                        <input type="number" placeholder={t.yourAge} className={`w-full p-3 border-2 rounded-lg ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-gray-300'}`} value={tempProfile.age} onChange={(e) => setTempProfile({...tempProfile, age: parseInt(e.target.value) || 65})} />
                      </div>
                      <div className="flex gap-3 pt-4">
                        <button onClick={() => { setProfile(tempProfile); setIsEditingProfile(false); }} className="flex-1 bg-green-600 text-white py-3 rounded-lg font-semibold">{t.saveChanges}</button>
                        <button onClick={() => setIsEditingProfile(false)} className={`flex-1 py-3 rounded-lg font-semibold ${darkMode ? 'bg-gray-700 text-white' : 'bg-gray-300'}`}>{t.cancel}</button>
                      </div>
                    </div>
                  ) : (
                    <button onClick={() => setIsEditingProfile(true)} className="w-full bg-blue-600 text-white py-3 rounded-lg font-semibold">{t.editProfile}</button>
                  )}
                </div>

                <div className={`rounded-lg shadow-lg p-6 border-2 ${darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'}`}>
                  <h3 className={`text-xl font-bold mb-6 ${darkMode ? 'text-white' : 'text-gray-800'}`}>{t.appearance}</h3>
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-4">
                      <div className={`w-14 h-14 rounded-full flex items-center justify-center ${darkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>
                        {darkMode ? <Moon className="w-7 h-7" /> : <Sun className="w-7 h-7" />}
                      </div>
                      <div>
                        <p className={`font-semibold text-lg ${darkMode ? 'text-white' : 'text-gray-800'}`}>{t.darkMode}</p>
                        <p className={`text-sm ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>{darkMode ? t.enabled : t.disabled}</p>
                      </div>
                    </div>
                    <button onClick={() => setDarkMode(!darkMode)} className={`relative w-20 h-10 rounded-full ${darkMode ? 'bg-blue-600' : 'bg-gray-300'}`}>
                      <div className={`absolute top-1 left-1 w-8 h-8 rounded-full bg-white`} style={{ transform: darkMode ? 'translateX(40px)' : 'translateX(0)', transition: 'transform 0.3s' }}></div>
                    </button>
                  </div>
                </div>

                <div className={`rounded-lg shadow-lg p-6 border-2 ${darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'}`}>
                  <h3 className={`text-xl font-bold mb-6 ${darkMode ? 'text-white' : 'text-gray-800'}`}>{t.healthStats}</h3>
                  <div className="grid md:grid-cols-2 gap-4">
                    <div className={`flex justify-between items-center p-4 rounded-lg ${darkMode ? 'bg-blue-900' : 'bg-blue-50'}`}>
                      <span className={darkMode ? 'text-gray-400' : 'text-gray-600'}>{t.totalMedicines}</span>
                      <span className={`text-2xl font-bold ${darkMode ? 'text-blue-400' : 'text-blue-600'}`}>{medicines.length}</span>
                    </div>
                    <div className={`flex justify-between items-center p-4 rounded-lg ${darkMode ? 'bg-green-900' : 'bg-green-50'}`}>
                      <span className={darkMode ? 'text-gray-400' : 'text-gray-600'}>{t.exercisePlanTime}</span>
                      <span className={`text-2xl font-bold ${darkMode ? 'text-green-400' : 'text-green-600'}`}>{profile.age < 12 ? 'N/A' : '45 min'}</span>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}